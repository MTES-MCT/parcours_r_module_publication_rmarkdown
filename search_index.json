[["index.html", "exo partie 2 Introduction 0.1 Le parcours de formation 0.2 Le groupe de référents R du pôle ministériel Objectifs de ce module 0.3 Exemples de productions avec R Markdown", " exo partie 2 Caroline COUDRIN 22/11/2022 Introduction Crédit photographique Pascal Boulin 0.1 Le parcours de formation Ce dispositif de formation vise à faire monter en compétence les agents du MTECT (Ministère de la Transition écologique et de la Cohésion des territoires) et du MTE (Ministère de la Transition énergétique) dans le domaine de la science de la donnée avec le logiciel R. Il est conçu pour être déployé à l’échelle nationale par le réseau des CVRH (Centre de Valorisation des Ressources Humaines). Le parcours proposé est structuré en modules de 2 jours chacun. Avoir suivi les deux premiers (ou disposer d’un niveau équivalent) est un pré-requis pour suivre les suivants qui sont proposés “à la carte” : Module 1 : Socle - Premier programme en R Module 2 : Socle - Préparation des données Module 3 : Statistiques descriptives Module 4 : Analyse des données multi-dimensionnelles Module 5 : Datavisualisation : Produire des graphiques, des cartes et des tableaux Module 6 : Publications reproductibles avec RMarkdown (à venir) Module 7 : Analyse spatiale Module 8 : Big data et optimisation du code (à venir) Module 9 : Applications interactives avec RShiny (à venir) La mise à disposition des supports de formation se fait par la page d’accueil du parcours de formation. Ces supports sont en licence ouverte. Si vous souhaitez accéder aux sources ou aux données mobilisées pendant les formations, vous pouvez directement les télécharger depuis le Github du pôle ministériel. Un package d’exercices, {savoirfR} rassemble toutes les données et les consignes d’exercices de ce parcours de formation (Modules 1, 2, 5 et 7 seulement pour l’instant). Pour vous tenir au courant de l’offre de formation proposée par le réseau des CVRH, consultez la plateforme OUPS (un accès intranet MTECT-MTE est nécessaire). Vous pouvez vous y abonner pour recevoir les annonces de formation qui vous intéressent. Pour échanger de l’information, discuter autour de R ou encore faire part de difficultés et trouver ensemble les solutions, il existe deux canaux d’entraide : s’inscrire en envoyant un message vide à l’adresse sympa@developpement-durable.gouv.fr ; rejoindre le salon Tchap #utilisateurs_r. 0.2 Le groupe de référents R du pôle ministériel Objectifs de ce module A l’issue de la formation sur ce module, les stagiaires devraient être en capacité de produire une publication reproductible et paramétrable relativement simple de A à Z. Il sera fait appel aux compétences acquises lors des précédents modules, en particulier des modules “socle”. Le langage utilisé est [R Markdown], qui permet d’avoir dans un seul fichier du texte mis en forme, du code (R, mais aussi Python, Julia, C++, SQL et même SAS !) et les sorties du code. Les points abordés comprendront : La syntaxe R Markdown L’insertion de code R Les outils de mise en forme Les formats de sortie .html, .pdf L’assemblage de plusieurs documents R Markdown (package bookdown) La publication des documents produits 0.3 Exemples de productions avec R Markdown R markdown permet de produire des sorties dans un grand nombre de formats. Quelques exemples : Des documents “simples” en format html, word, epub, pdf, etc. Des diaporamas en formats Powerpoint, Beamer, Ioslides, Revealjs, etc. Des tableaux de bord interactifs en combinant avec des widgets html ou des éléments produits par le package shiny. Exemple Des pages web statiques comme des supports de formation Des publications paramétrables faciles à mettre à jour Publications RPLS 2020 régionales Conjoncture logement neuf en Pays-de-Loire Dans les Hauts-de-France Et même des livres : R for data science divers autres formats comme des blogs, des sites web, du epub, des diaporamas, etc. "],["get-started.html", "Chapitre 1 Bien commencer 1.1 Créer un projet sous Rstudio pour vous permettre de recenser vos travaux. 1.2 Utilisation du package {savoirfR} 1.3 Créer votre arborescence de projet 1.4 Activer les packages nécessaires 1.5 Bien structurer ses projets data", " Chapitre 1 Bien commencer 1.1 Créer un projet sous Rstudio pour vous permettre de recenser vos travaux. Pourquoi travailler avec les projets Rstudio plutôt que les scripts R ? Cela permet la portabilité : le répertoire de travail par défaut d’un projet est le répertoire où est ce projet. Si vous transmettez celui-ci à un collègue, le fait de lancer un programme ne dépend pas de l’arborescence de votre machine. Fini les setwd(\"chemin/qui/marche/uniquement/sur/mon/poste\") ! Toujours sur la portabilité, un projet peut être utilisé avec un outil comme renv qui va vous intégrer en interne au projet l’ensemble des packages nécessaires au projet. Cela permet donc à votre collègue à qui vous passez votre projet de ne pas avoir à les installer et, surtout, si vous mettez à jour votre environnement R, votre projet restera toujours avec les versions des packages avec lesquelles vous avez fait tourner votre projet à l’époque. Cela évite d’avoir à subir les effets d’une mise à jour importante d’un package qui casserait votre code. Pour activer renv sur un projet, il faut l’installer avec install.packages(\"renv\"). Pour intialiser la sauvegarde des packages employés dans le projet, il faut utiliser renv::init() Les packages chargés dans le projet sont enregistrés dans un sous-dossier dédié. En cours de travail sur le projet, la commande renv::snapshot() permet de faire une sauvegarde, la commande renv::restore() permet de charger la dernière sauvegarde. En savoir plus sur renv Cela permet de se forcer à travailler en mode projet : on intègre à un seul endroit tout ce qui est lié à un projet : données brutes, données retravaillées, scripts, illustrations, documentations, publications… et donc y compris les packages avec renv. On peut travailler sur plusieurs projets en même temps, Rstudio ouvre autant de sessions que de projets dans ce cas. Les projets Rstudio intègrent une interface avec les outils de gestion de version Git et SVN. Cela veut dire que vous pouvez versionner votre projet et l’héberger simplement comme répertoire sur des plateformes de gestion de code telle que Github ou Gitlab. Pour créer un projet : Cliquez sur Project en haut à droite puis New Project. Cliquez sur New Directory. 1.2 Utilisation du package {savoirfR} Pour faciliter le déroulé de ce module, l’ensemble des exercices (énoncés, corrigés et données) a été intégré à un package réalisé par le groupe des référents R : {savoirfR} install.packages(&#39;remotes&#39;) remotes::install_github(&quot;MTES-MCT/savoirfR&quot;) Pour l’utiliser, il suffit de créer un nouveau projet dans un nouveau répertoire, en sélectionnant le “Project Type” Exercice Parcours R MTES-MCT. Remplissez et sélectionnez le module suivi. 1.3 Créer votre arborescence de projet Créer un répertoire /src où vous mettrez vos scripts R. Créer un répertoire /figures où vous mettrez vos illustrations issues de R. 1.4 Activer les packages nécessaires Commencez par rajouter un script dans le répertoire /src à votre projet qui commencera par : activez l’ensemble des packages nécessaires, chargez les données dont vous aurez besoin. 1.5 Bien structurer ses projets data Plusieurs documents peuvent vous inspirer sur la structuration de vos projets data par la suite. En voici quelques uns : https://github.com/pavopax/new-project-template https://nicercode.github.io/blog/2013-04-05-projects/ https://www.inwt-statistics.com/read-blog/a-meaningful-file-structure-for-r-projects.html http://projecttemplate.net/architecture.html A partir du moment où quelques grands principes sont respectés (un répertoire pour les données brutes en lecture seule par exemple), le reste est surtout une question d’attirance plus forte pour l’une ou l’autre solution. L’important est de vous tenir ensuite à garder toujours la même structure dans vos projets afin de vous y retrouver plus simplement. "],["la-publication-reproductible.html", "Chapitre 2 La publication reproductible 2.1 Définition 2.2 Bonnes pratiques 2.3 Origine du format R markdown 2.4 Du .Rmd au format de sortie", " Chapitre 2 La publication reproductible 2.1 Définition Le schéma classique pour produire un rapport ou une publication ressemble à ça : Les données mobilisées proviennent de bases de données, de tables ou de SIG, et rien que pour les lire, il y a besoin de plusieurs logiciels selon les formats. Les données sont ensuite nettoyées (valeurs manquantes ou aberrantes, recodages, discrétisation, renommages …), puis traitées (sélection, agrégation, modélisation) et visualisées (tables, graphiques, cartes). Les éléments visuels sont insérés dans un traitement de texte qui sert aussi à la rédaction, et enfin la version diffusable est produite au format pdf. Plusieurs inconvénients à cette chaîne d’opérations : Beaucoup d’opérations manuelles chronophages et sources potentielles d’erreurs. Si quelque chose change, il faut tout recommencer (mise à jour, adaptation à une autre zone géographique ou fenêtre temporelle). La publication finale n’est pas “reproductible” au sens où la traçabilité est insuffisante pour qu’un autre auteur, avec les mêmes données, arrive à la même publication \\(\\Rightarrow\\) la recherche d’erreurs est difficile et les passations délicates. Les contenus sont statiques, ce qui est peu attractif par rapport aux possibilités d’interactivité offertes par les technologies web. Le fil conducteur de ce module est la production de A à Z d’un portrait de territoire, à partir de données variées, en travaillant entièrement dans RStudio au format R Markdown. On appelle ici “publication reproductible” un document élaboré à partir de données et dont tout le code est fourni. C’est la disponibilité du code qui rend l’analyse réplicable, indépendament de la qualité de la documentation qui peut être fournie. Travailler ainsi a pour avantages majeurs une plus grande facilité quand il s’agit de : Rechercher d’éventuelles erreurs Justifier précisément les analyses réalisées, les pré-traitements et autres choix méthodologiques Mettre à jour la publication Modifier le code par exemple pour l’adapter à unnouveau document Partager une méthode La transparence dans le traitement de l’information est importante en termes de crédibilité pour les institutions. Selon Wikipedia, qui parle de “crise de la reproductibilité”, une part très importante des études publiées dans des revues prestigieuses ne sont pas réplicables. Un MOOC intitulé “Recherche reproductible : principes méthodologiques pour une science transparente” est périodiquement proposé sur la plateforme France Université Numérique. Contrairement à ce que suggère son titre, des non-chercheurs peuvent tout à fait le suivre car ses principes sont pleinement applicables aux métiers qui font appel à la donnée en général. Tous les exercices peuvent être faits avec R et RStudio. 2.2 Bonnes pratiques On vise à assurer la continuité et la traçabilité coomplète de la chaîne de traitement depuis la donnée brute (fichiers sources fournis par les producteurs, millésimés) jusqu’au document final. Par exemple on ne supprime pas “à la main” des données qui sembleraient aberrantes. Les choix méthodologiques sont documentés. Travail est organisé en mode projet avec des fichiers localisés dans une arborescence classique avec archivage des millésimes des jeux de données mobilisés. 2.3 Origine du format R markdown Ce format de document a été introduit en 2012 à la sortie du package knitr. Auparavant, il existait Markdown, un “langage de balisage léger”, sorte d’intermédiaire entre du texte brut et du traitement de texte. La syntaxe de Markdown est très simplifiée. On peut le saisir avec un éditeur de texte comme Notepad et il est lisible même non formaté. Pourquoi utiliser un langage de balisage léger ? Des avantages majeurs : Séparer le fond de la forme. On peut taper “au kilomètre” en se concentrant sur le contenu, et voir ensuite les questions de forme (y compris le format de sortie, HTML, PDF, traitements de texte, diaporamas, tableaux de bord, voire EPUB). Cette simplicité permet le suivi de version par des outils comme Git. Par contre, la simplicité signifie peu de fonctionnalités donc des sorties assez pauvres. L’idée, avec R Markdown, était garder les avantages du langage existant Markdown mais en lui ajoutant des fonctionnalités d’interprétation de code R, intégré aux documents sous formes de chunks. En fait, les versions actuelles du package knitr permettent d’interpréter d’autres langages comme du \\(\\LaTeX\\) ou du code Python. R Markdown est en quelque sorte un cadre pour travailler en data science. Un même document permet de sauvegarder et exécuter du code ainsi que de produire des rapports mis en forme pouvant contenir une grande diversité d’objets statiques ou dynamiques. 2.4 Du .Rmd au format de sortie On distingue deux étapes : La première, réalisée par le package knitr, interprète le document R Markdown et exécute les morceaux de code. Elle produit un fichier Markdown contenant le texte, le code et le résultat de l’exécution du code. Puis, le convertisseur de formats Pandoc se charge de produire le document de sortie au format choisi. Ca peut paraître compliqué mais en pratique, chacune des fonctions render de knitr exécute la chaîne du début à la fin. "],["le-fichier-r-markdown.html", "Chapitre 3 Le fichier R Markdown 3.1 R markdown dans RStudio 3.2 Les éléments d’un fichier .Rmd 3.3 Insérer des images", " Chapitre 3 Le fichier R Markdown Ce chapitre n’a pas l’ambition de se substituer au Le guide définitif de Rmarkdown (un des auteurs, Yihui Xie, est le créateur du package rmarkdown) ou au guide de référence mais peut faciliter à un certain nombre de lecteurs francophones l’approche et la compréhension du système de production de documents R Markdown car à notre connaissance ces guides n’ont pas encore été traduits. Au-delà de ces manuels de référence, certes complets mais imposants, il existe une anti-sèche (cheatsheet) rmarkdown qui réussit en deux pages à synthétiser l’essentiel de ce qu’il faut savoir pour exploiter le système de production proposé au travers de RStudio. La formation proposée et le présent chapitre ont d’ailleurs pour principal objectif de permettre à tout un chacun de pouvoir complètement en tirer profit. Le guide officiel (R Markdown Reference Guide) ainsi que l’antisèche (R Markdown Cheat Sheet) sont accessibles facilement depuis RStudio en passant par le menu Aide/Help. 3.1 R markdown dans RStudio Pour utiliser R Markdown, il faut que le package rmarkdown soit installé : install.packages (&quot;rmarkdown&quot;) library (rmarkdown) Dans l’environnement de développement intégré RStudio de votre bureau, le développeur dispose d’outils qui simplifient la production d’un fichier R Markdown. Le travail comprend généralement les étapes suivantes, toutefois les étapes 2 à 4 peuvent se faire dans n’importe quel ordre : Ouvrir un nouveau fichier .Rmd (prérempli avec des exemples) Écrire des instructions de traitement des données Compléter le document en ajoutant du texte Adapter l’en-tête Lancer la génération du document Publier le document (cas particulier, facultatif) 3.1.1 Créer un fichier .Rmd ASK: Début d’un TD (travail dirigé) ? — LBn ANS: le mettre avant et inclure la modif de l’entete dans le TD 2 — CCn ok!!!!! On crée un nouveau fichier de type Rmarkdown en allant dans le menu File \\(\\Rightarrow\\) New file \\(\\Rightarrow\\) R Markdown Une pop-up s’ouvre alors pour donner quelques informations afin d’initialiser le fichier qui va être créé en remplissant quelques champs imposés ou fortement recommandés par le processus global. Pour commencer simplement, on choisit un format de sortie HTML. C’est le format de sortie par défaut, très utilisé (nous verrons les autres formats de sortie par la suite). RStudio crée un fichier contenant des exemples des éléments structurant un fichier R markdown. L’extension de ce type de fichier est .Rmd. 3.1.2 Lancer la génération du document Une fois le fichier .Rmd complété et enregistré, vous pouvez visualiser la table des matières en cliquant sur l’icône . Vous pouvez aussi prévisualiser le document en sortie en cliquant sur l’icône compas qui donne accès au “visual editor”. Pour générer un document à partir du fichier .Rmd, il suffit de cliquer sur le bouton knit. Un fichier (html si vous avez choisi ce format de sortie) portant le même nom que le fichier.Rmd est alors créé dans le repertoire de travail (là où vous avez créé votre projet R), et en même temps le document généré s’ouvre dans le viewer de R Studio (ou dans une pop-up). Trucs &amp; Astuces On peut générer le document d’autres façons: rmarkdown::render(nom_fichier.Rmd) ou grâce au raccourci Ctrl + Shift + K Ce document contient l’ensemble des informations du fichier .Rmd, que cela soit le texte (mis en forme), la visualisation du code intégré (si celle-ci est demandée) et ce qui est produit par ce code. ASK: Est ce qu’on met une image des icones? Est ce qu’on met une image du document généré par le fichier de base? cela permettrait que les stagiaires visualisent directement de quoi on parle OK — CCn 3.2 Les éléments d’un fichier .Rmd Un fichier R Markdown est constitué de 3 éléments principaux. L’en-tête contient les métadonnées pour guider la génération du document. Il est suivi du corps du futur document, constitué de morceaux de code (les chunks) à éxécuter et de partie de textes à afficher avec des élements de mise en forme. Dans les sections suivantes ces composants seront détaillés un par un. 3.2.1 L’en-tête L’en-tête s’écrit au format YAML c’est un format ayant pour objectif de représenter des informations plus élaborées que le simple CSV en gardant cependant une lisibilité presque comparable. L’en-tête est parfois appelé le Header ou le YAML. Il sert à définir les paramètres de votre document comme les informations basiques sur le document ainsi que des choix relatifs au format de sortie (PDF, HTML, DOCX, etc.). Il est délimité par deux séries de ---. Trucs &amp; Astuces Pour modifier l’en-tête, attention à bien respecter l’alignement des indentations. Ce sont elles qui indiquent la hiérarchie entre les éléments texte. C’est dans le YAML que vous allez définir notamment : le titre (initialisé lors de la création du fichier) les auteurs la date de votre document le format de sortie (initialisé lors de la création du fichier) des options des paramètres. title: &quot;mon_premier_document&quot; author: &quot;Moi&quot; date: &quot;31/10/2022&quot; output: html_document On peut rajouter plusieurs auteurs : title: &quot;mon_premier_document&quot; author: - &quot;Moi&quot; - &quot;Toi&quot; date: &quot;31/10/2022&quot; output: html_document On peut rajouter des options pour un output, ce qui sera vu en détail dans le paragraphe 1.3.1. Il est possible de rajouter plusieurs outputs : title: &quot;mon_premier_document&quot; author: - &quot;Moi&quot; - &quot;Toi&quot; date: &quot;31/10/2022&quot; output: pdf_document: default html_document: toc: true theme: flatly Exercice 1 Ouvrir Rstudio Créer un fichier markdown, format html prévisualiser le document avant toutes modifications Mettez-vous en auteur du document Rajouter un theme spécifique Cliquer sur knit pour compiler le document et identifier les correspondances entre fichier .Rmd et fichier html 3.2.2 Les éléments texte Le texte s’écrit en syntaxe Markdown, qui est en fait du PANDOC pour Markdown. Vous trouverez la documentation complète sur le PANDOC pour Markdown ici. Trucs &amp; Astuces De manière générale, il est préférable de laisser au moins une ligne blanche entre différentes éléments (par exemple entre un titre et le paragraphe). Cela évite toute confusion lors de la génération du document (tous les processus de génération n’interpretent pas exactement la même chose pour une même synthaxe). 3.2.2.1 Le texte simple Le texte simple est directement interprété sans besoin de balisage. 3.2.2.2 La mise en forme à la volée Pour les caractères en italique, entourer de deux * ou deux _ : *caractères italiques*. Pour les caractères gras, entourer de deux ** ou deux __ : **caractères gras**. Pour les indices et les exposants, entourer des caractères ~indices~ou ^exposants^ respectivement. Pour les barrés, entourer des caractères ~~barrés~~. Pour un style code, entourer des caractères `code`. Pour un bloc de code, entourer des caractères ``` ou on commence chaque ligne par au moins 4 espaces. Pour forcer le retour à la ligne, terminer par un double espace ou un \\ ou sauter une ligne. 3.2.2.2.1 Les titres Contrairement à la pratique en R, le # indique les titres. Par défaut, dans Rmarkdown, ils ne sont pas numérotés. # pour le Titre1 ## pour le Titre2 ### pour le Titre3 #### pour le Titre4 ##### pour le Titre5 ###### pour le Titre6 Rend: Pour une numérotation automatique des titres, tableaux, figures, cartes, équations, etc. il faut passer au package bookdown (voir partie suivante). 3.2.2.2.2 Les listes Liste à puces Les listes à puces, sans ordre, commencent par - ou * ou +, en précédant la liste par une ligne vide. On peut créer des listes imbriquées en indentant la sous-liste. - Premier élément - Deuxième élément - Sous-élément 1 - ezgtz - aergtg - Sous-élément 2 Rend : Premier élément Deuxième élément Sous-élément 1 aaaa bbbb Sous-élément 2 Liste numérotée 1. Premier élément 2. Deuxième élément 1) Sous-élément 1 a- aaaa b- bbbb ii) Sous-élément 2 Rend : Premier élément Deuxième élément Sous-élément 1 a- aaaa b- bbbb  Sous-élément 2 3.2.2.2.3 Les mentions Les “mentions” sont pratiques pour mettre en valeur les éléments “à retenir”. &gt; Texte à mettre en mention Rend : Texte à mettre en mention 3.2.2.2.4 Liens et note de bas de page Pour faire un lien vers un site internet, on met le texte affiché entre [] et l’adresse http entre () [Cliquer sur le lien](https://mtes-mct.github.io/parcours-r/) rend Cliquer sur le lien Les notes de bas de page s’écrivent à l’intérieur de ^[]. ^[Ceci est une note de bas de page] rend 1. 3.2.2.3 Commentaires Pour mettre une partie du fichier en commentaires, non traitée, il faut encadrer la partie par &lt;!-- commentaires --&gt;. Pour cela on peut utiliser le raccourci clavier Ctrl + Shift + C ou la commande dans le menu “Code”. 3.3 Insérer des images La syntaxe la plus simple pour insérer une image est la suivante : ![Légende de la figure.](chemin/vers/image.png) On peut adapter les dimensions de l’image : ![Légende de la figure.](chemin/vers/image.png){ width=50% } Trucs &amp; Astuces NB : les caractères ‘espace’ ne sont pas autorisés autour du signe égal =, ni entre la parenthèse fermante et l’accolade ouvrante. On a ){. On peut aussi utiliser la fonction knitr::include_graphics : knitr::include_graphics(&quot;assets/img/couleuvre.jpg&quot;) Cette dernière méthode, préconisée quand le format de sortie n’est pas du html, permet de mieux controller l’affichage de l’image. Mais cela se fait à l’intérieur d’un chunck et ça, on le verra au chapitre suivant. Exercice 2 Partir du fichier .Rmd de l’exercice précédent Créer un texte avec un titre, un paragraphe, une liste d’item, un encart et un lien Appuyer sur visual pour avoir un aperçu du rendu final Ceci est une note de bas de page↩︎ "],["intégrer-du-code-dans-les-rmd---les-chunks.html", "Chapitre 4 Intégrer du code dans les RMD - Les chunks 4.1 Les options des chunks 4.2 Les options globales des chunks 4.3 Utiliser des outputs 4.4 Les insertions de code en ligne 4.5 Exécuter le code des chunks", " Chapitre 4 Intégrer du code dans les RMD - Les chunks Les parties de code R sont contenues dans des blocs, appelés chunks. Ces chunks commencent et finissent par les balises ```. C’est dans les chunks que vous pouvoir insérer le code R que vous voulez voir exécuter. On peut créer un nouveau chunk en cliquant sur le bouton ou grâce au raccourci clavier Ctrl + Alt + I. Ces chunks peuvent être nommés (avec des caractères alphanumériques minuscules et majuscules et des tirets -). Dans l’exemple précédent, le nom du chunk est cars. 4.1 Les options des chunks Au début de chaque chunk se trouve une accolade contenant la lettre r. C’est dans cette accolade, après la lettre r (qu’il ne faut pas enlever) que les options vont pouvoir être passées. Elles permettent de controller finement ce qui est produit par le chunk, pour choisir de faire apparaître, ou non, le code dans le rapport dynamique, ainsi que les résultats, ou encore pour définir la taille des plots. Chaque chunk peut recevoir des options. Voici quelques exemples utilisés fréquemment : eval = TRUE : Le chunk est exécuté. include = FALSE : Le code contenu dans le chunk est éxecuté sans que soient affichés ni le chunk ni son résultat. Ses résultats sont utilisables par d’autres chunks. echo = FALSE : permet de ne pas afficher les codes dans le rendu. Par contre le résultat est affiché. message = FALSE : empêche l’affichage des messages d’information générés par les codes. warning = FALSE : empêche l’affichage des messages d’alerte générés par les codes. error = FALSE : empêche l’affichage des messages d’erreur générés par les codes. fig.cap = \"...\" : ajoute une légende aux graphiques. fig.align = \"...\" : aligne les graphiques (choix : left, right ou center). fig.height = 6, fig.width = 8 : permet de modifier les dimensions de la figure (en pouces). fig.pos = \"...\" : permet de définir la position des graphiques (choix : ????). ASK: comment on utilise l’option fig.pos? — CCn Les chunks sont gérés dans {Rmarkdown} par le package {knitr}. Il y a plus de 50 options possibles pour un chunk, vous pouvez trouver l’ensemble de la documentation ici. 4.2 Les options globales des chunks Il est possible de définir des options globales qui seront appliquées à chacun des chunks qui sont contenus dans le fichier, sauf spécifications contraires dans les options d’un chunk. ```{r, setup, include=FALSE} knitr::opts_chunk$set( message = FALSE, warning = FALSE ) ``` Ce chunk setup se trouve en dessous de l’en-tête, il permet de régler les options par défaut de tous les chunks grâce à la fonction knitr::opts_chunk$set(). Par exemple, on va pouvoir indiquer que l’on ne veut pas faire apparaitre les messages et les warnings qui pourraient être générés lors de l’exécution des chunks. Au lieu de le faire pour tous les chunks, on peut le faire une seule fois ici. 4.3 Utiliser des outputs A l’intérieur du chunk, de nombreuses choses peuvent être faites, comme traiter des données, produire une table, des graphiques ou du texte. Pour cela, on utilise différentes fonctions R comme plot ou kable dans un chunk. On peut par exemple inclure un graphique: ```{r, echo=FALSE} plot(pressure) ``` ce qui affiche le graphique dans le document, directement après le chunk: Ou des données non mises en forme ```{r, echo=FALSE} summary(cars) ``` ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00 Ou des tableaux ```{r, echo=FALSE} knitr::kable(iris[1:5, ], caption = &#39;A caption&#39;) ``` qui rend Table 4.1: A caption Sepal.Length Sepal.Width Petal.Length Petal.Width Species 5.1 3.5 1.4 0.2 setosa 4.9 3.0 1.4 0.2 setosa 4.7 3.2 1.3 0.2 setosa 4.6 3.1 1.5 0.2 setosa 5.0 3.6 1.4 0.2 setosa 4.4 Les insertions de code en ligne Enfin, il est possible d’insérer la valeur d’objets R (variable, liste, résultat de calcul simple…) dans du texte. Pour cela il faut inclure l’objet R entre `r ...code...`. Par exemple le code suivant: ```{r, echo=FALSE} numero &lt;- 6 ``` Je suis actuellement en train de me former au module `r numero`. permet d’afficher dans le document: Je suis actuellement en train de me former au module 6. 4.5 Exécuter le code des chunks Les codes contenus dans les chunks d’un document.Rmd peuvent être exécutés comme les codes contenus dans un script R en .R. Vous pouvez exécuter l’ensemble en faisant CTRL + A pour tout sélectionner et CRTL + ENTER pour exécuter. Vous pouvez aussi exécuter le code chunk par chunk en placer votre souris au début d’un chunk puis en utilisant CTRL + ENTER ou en cliquant sur le bouton play vert en haut du chunk. D’autres options sont disponibles dans le menu déroulant du bouton run en haut à droite. Lorsque le code est excécuté, par défaut les résultats (sorties) et les plots sont affichés dans le document .Rmd. Pour afficher les sorties dans la console et les plots dans la fenêtre graphique, il faut choisir l’option “Chunk Output in Console“. Exercice 3 ASK: dans ce exercice est ce qu’on doit expliciter les traitements de données et le graphique attendu? oui! il faut prévoir un temps pour expliciter les données utilisées (RPLS) — CCn Partir du fichier .Rmd de l’exercice précédent Définir des options générales Ajouter un chunk créant une table, qui sera traitée mais non affichée dans le document final Ajouter un chunk créant un graphique, qui sera traité et affiché dans le document final Ajouter une image Générer le document "],["convertir-le-fichier-rmarkdown-pour-utilisation.html", "Chapitre 5 Convertir le fichier Rmarkdown pour utilisation 5.1 Les formats de sortie", " Chapitre 5 Convertir le fichier Rmarkdown pour utilisation 5.1 Les formats de sortie Lors de la création du fichier .Rmd, vous avez dû choisir le format par défaut du document qui sera généré. Ce choix se retrouve dans l’option outputde l’en-tête. Il est possible de modifier le format du document généré, soit en modifiant l’option de l’en-tête ou celle de la fonction knit (via sur la flèche vers le bas du bouton knit ou via les options de la ligne de code). Il existe deux types de format dans le package rmarkdown: documents et présentations. Tous les formats possibles sont listés ci-dessous: beamer_presentation context_document github_document html_document ioslides_presentation latex_document md_document odt_document pdf_document powerpoint_presentation rtf_document slidy_presentation word_document Chaque format a son propre lot d’options, qui sont documentées dans la documentation de la fonction associée (par exemple ?rmarkdown::html_document). Trucs &amp; Astuces Attention : quand on inclut du code R dans un document, il faut s’assurer que les packages R utilisés sont compatibles avec le(s) format(s) choisi(s). Les packages du tidyverse sont compatibles avec les formats HTML et PDF. La compatibilité entre packages et formats doit être vérifiée au cas par cas. Nous allons vous présenter les formats les plus utiles. 5.1.1 HTML A l’origine, Markdown a été conçu pour générer du HTML; c’est ce format qui a le plus de possibilités parmi tous les formats. C’est aussi celui qui est le plus compatible avec les différents packages R de production d’output. Pour obtenir un document HTML, il faut mettre l’option output: html_document dans l’en-tête. Voici les options utilisées fréquemment: toc: true permet d’ajouter une table des matières (table of contents en anglais) à notre document. toc_depth: 2 permet de définir le niveau de titre le plus bas à mettre dans la table des matières (par défaut 3). toc_float : true permet de rendre la table des matières flottante. Elle sera systématiquement visible, meme si on défile le document. Ce paramètre accepte des options. number_sections : true permet de numéroter les titres. theme: flatly permet de changer le thème du document (tiré de la librairie Bootswatch. fig_width : 7 et fig_height : 5 permettent de définir par défaut la largeur et la hauteur des figures. fig_caption : true permettent de définir les figures contiennent une légende. title: &quot;mon_premier_document&quot; author: - &quot;Moi&quot; - &quot;Toi&quot; date: &quot;31/10/2022&quot; output: html_document: toc: true theme: flatly L’ensemble des options est listé page 5 du document de référence Rmarkdown 5.1.2 PDF Pour générer des documents PDF, il est nécessaire d’avoir installé LaTeX. Pour ceux qui ne l’ont pas déjà installé, nous conseillons TinyTeX qui est une distribution LaTeX légère, portable et facile à maintenir. Le package tinytex installe automatiquement les packages LaTeX manquants lors que la compilation de documents R Markdown en PDF. Le code suivant permet d’installer tinytex : ```{r, include=FALSE} install.packages(&#39;tinytex&#39;) install_path &lt;- file.path(Sys.getenv(&#39;LOCALAPPDATA&#39;), &#39;TinyTex&#39;, fsep=&#39;\\\\&#39;) tinytex::install_tinytex(dir=install_path) ``` LaTeX est un logiciel externe qui vient en complément de R pour produire des PDF. Pour pouvoir l’utiliser il faut l’installer (via TinyTeX) mais aussi prévenir R du lieu de ces nouveaux éxécutables. Pour cela, il faut modifier le fichier caché .Renviron présent dans notre Home. Il faut ajouter les lignes de code suivantes: TINYTEX_HOME=&quot;${LOCALAPPDATA}\\TinyTex\\bin\\win32&quot; PATH=&quot;${TINYTEX_HOME};${PATH}&quot; ASK: est ce que cela est correct et clair? install_tinytex ne fonctionne toujours pas chez moi! multirow.sty non trouvé — CCn Il est important de noter qu’en LaTeX, les figures sont flottantes par défaut. Même si on crée un graphique dans un bout de code présent sur la 1ere page, celui-ci peut finalement apparaitre sur la page suivante. LaTeX a tendance à faire apparaitre les figures au début ou à la fin des pages. Nous vous conseillons de ne traiter le posionnement des figures à la fin, une fois la totalité du contenu écrite. Pour cela il faudra utiliser les options de positionnement dans les chunks (par exemple fig_pos = “h”) Pour obtenir un document PDF, il faut mettre l’option output: pdf_document dans l’en-tête. Voici les options utilisées fréquemment: toc: true permet d’ajouter une table des matières (table of contents en anglais) à notre document. toc_depth: 2 permet de définir le niveau de titre le plus bas à mettre dans la table des matières (par défaut 2). number_sections : true permet de numéroter les titres. fig_width : 7 et fig_height : 5 permettent de définir par défaut la largeur et la hauteur des figures (par défaut 6.5x4.5). fig_caption : true permettent de définir les figures contiennent une légende (par défaut true). Trucs &amp; Astuces Si vous souhaitez accéder à plus d’options de mise en forme de tableau, le package kableExtra contient des fonctions compatibles avec les formats HMTL et PDF. Cependant cela reste compliqué de mettre en forme des tableaux complexes, en particulier si vous souhaitez plusieurs formats en sortie. Nous vous conseillons d’adapter la mise en forme pour chaque format ou de trouver une nouvelle façon de représenter la donnée. Exercice 4 En repartant du fichier .Rmd de l’exercice précédent : Modifier les options pour avoir un sommaire flottant affichant un seul niveau de titre Changer le thème utilisé Générer le document Repartir du fichier .Rmd pour générer un document PDF. Il est important de vérifier la compatibilité des éléments définits avec ce nouveau format. "],["ajouter-des-paramètres.html", "Chapitre 6 Ajouter des paramètres", " Chapitre 6 Ajouter des paramètres Un des nombreux avantages de R Markdown est la possibilité de reproduire des analyses très facilement en actualisant une partie du travail ou en changeant un des entrants du document. Utiliser des paramètres permet d’aller encore plus loin pour créer un document qui peut être réutilisé pour plusieurs scenarios. On peut ainsi créer des documents pour des territoires ou des années différents, faire tourner une analyse en changeant une des hypothèses ou changer le comportement de knitr selon les cas rencontrés. Les paramètres sont spécifiés dans l’en-tête avec l’option params dans laquelle plusieurs paramètres, et leur valeur par défaut, sont listés, un par ligne. Les paramètres peuvent etre de type character, numeric, integer et logical mais aussi des expressions R tant qu’elles sont précédées de !r. L’en-tête, et donc le code pouvant y être présent, est éxécuté avant le reste du code donc il est nécéssaire d’expliciter les packages utilisés. Par exemple: title: &quot;mon_premier_document&quot; author: &quot;Moi&quot; date: &quot;31/10/2022&quot; output: html_document params: annee: 2022 region: Bretagne date: !r lubricate::today() Une fois définis dans l’en-tête, ces parametres sont accessibles depuis le fichier .RMD (texte ou code) mais aussi depuis la console. Ils sont stockés dans une liste en lecture nommée params. Le code suivant montre quelques exemples d’utilisation des paramètres : --- title: &quot;mon_premier_document&quot; author: &quot;Moi&quot; date: &quot;31/10/2022&quot; output: html_document params: espece: setosa printcode: TRUE --- ```{r, setup, include=FALSE} knitr::opts_chunk$set( message = FALSE, warning = FALSE, echo = params$printcode ) ``` Les résultats affichés ci-dessus concernent l&#39;espece `r params$espece`. ```{r, include=FALSE} print(params) summary(iris) extrait &lt;- iris %&gt;% filter(Species==params$espece) ``` Il existe 3 façons de générer un document avec des paramètres: - utiliser le bouton knit, ce qui prend les valeur par défaut des paramètres utiliser l’interface RStudio selectionnant l’option Knit with Parameters du bouton knit. Cela ouvre une nouvelle fenêtre demandant de choisir les valeurs des paramètres indiqués dans l’en-tête. utiliser la fonction rmarkdown::render(). Sans autre option cette fonction utilisera les paramètres par défaut définis dans l’en-tête. On peut aussi définir de nouvelles valeurs en utilisant l’option params=. Cela donne par exemple : ```{r, echo=FALSE} rmarkdown::render(&quot;mon_premier_document.Rmd&quot;, params = list( espece =&quot;versicolor&quot;, printcode =FALSE )) ``` Cette dernière façon de faire, via la fonction rmarkdown::render() permet d’automatiser encore plus les choses en générant autant de documents que de valeurs différentes d’un paramètre. En effet, dans un script .R, il est possible de créer une fonction ayant en entrée les paramètres que l’on veut modifier plusieurs fois mais aussi le nom du document généré. En reprenant l’exemple précédant, on peut faire: gene_doc &lt;- function(nom_espece, impression) { outfile &lt;- paste0(&quot;doc-&quot;,nom_espece,&quot;.Rmd&quot;) rmarkdown::render(&quot;mon_premier_document.Rmd&quot;, params = list( espece = nom_espece, printcode = impression), output_file = outfile ) } "],["a-ne-pas-oublier.html", "Chapitre 7 A ne pas oublier", " Chapitre 7 A ne pas oublier Utilisation backticks Latex pour l’écriture mathématique ## Bookdown La principale différence entre la complilation en HTML d’un document bookdown et celle d’un document RMarkdown est que le premier comprend plusieurs pages HTML par défault - typiquement une par chapitre. La séparation d’un document en plusieurs pages a pour avantages d’autoriser l’envoi de liens vers des chacun des chapitres et de réduire le temps d’affichage car chaque page est moins lourde prise séparément. Les “plus” de bookdown (numérotation et référencement des équations, théorèmes, titres particuliers, bibliographie) ; cf bouquin bookdown pp 15-23 : Balises Table des matières css liens images versioning mise en page Flexdashboard nommer les chunks code hors chunks Les thèmes ggplot pour assurer la présentation homogène des graphiques + les fonctions custom Table des matières Homogénéiser la présentation : fonctions graphiques "],["rappels-du-jour-1.html", "Chapitre 8 Rappels du jour 1", " Chapitre 8 Rappels du jour 1 "],["exercice.html", "Chapitre 9 Exercice 9.1 Cadrage", " Chapitre 9 Exercice 9.1 Cadrage J’ai mis ici le code d’une appli shiny que j’ai commencé à coder. L’objectif de l’appli est d’avoir une interface de géolocalisation pour les adresses RPLS dans un premier temps mais on peut élargir ça à toutes les tables qui contiennent le type d’informations requises (Type de voie, numéro de voie, nom de voie, code postal et code insee) par l’API d’Etalab. Le géocodage se fait a raison de 1000 lignes toutes les 2 minutes environ. J’ai jamais réussi à utiliser le géocodage csv fourni par Etalab (https://adresse.data.gouv.fr/csv#preview) c’est pourquoi je me suis lancé dans une appli qui requête leur API avec curl . Ca peut être utile pour l’exo car : 1 - on télécharge les données RPLS 2018 (eh oui, c’est celles que je connais bien) 2 - On récupère et nettoie un peu les adresses 3 - On les géolocalise grâce à l’API d’Etalab 4 - On affiche la carte sur leaflet 5 - C’est pas encore fini du tout — # TODO : Les codes fonctionnent en .R si on lance tous les chunks dans un scrip. Mais je n’ai pas réussi à faire tourner les chunks dans un markdown — 9.1.1 Problématique 9.1.2 Rendu Pour ce rendu, quelles données ? Quels packages ? ### Données dispo ## Mise en page ### Quel type ? Barre de navigation ou onglets ? ### Un petit CSS ### Logo ### Métadoonnées ### Dashboard Pour ce rendu, quelles données ? Quels packages ? ## Importation des données "],["de-la-page-au-livre-le-package-bookdown.html", "Chapitre 10 De la page au livre, le package bookdown 10.1 Démarrer un projet de livre de la page blanche 10.2 Composer son livre quand la matière est déjà disponible 10.3 Au-delà du fond s’attaquer aux goûts et couleurs 10.4 Quelques options et détails techniques complémentaires 10.5 Etude d’un exemple bookdown : propre.rpls 10.6 Focus sur l’envoi au photocopieur du livre ou comment imprime 10.7 Bookdown, maintenant et au-delà", " Chapitre 10 De la page au livre, le package bookdown Le paquet bookdown est construit sur les fondations données par R Markdown http://rmarkdown.rstudio.com. Il s’appuie ainsi sur la simplicité de la syntaxe Markdown aussi bien que sur l’éventail des multiples formats de rendus possibles. Il apporte, quant à lui, un certain nombre de fonctionnalités complémentaires : générer un ensemble HTML multipages, établir des liens internes de renvoi vers des illustrations, des tableaux, des sections spécifiques du document ou encore des équations, faciliter la gestion d’annexes. Pour ne citer que les fonctionnalités par lesquelles l’extension bookdown enrichit significativement l’écosystème R Markdown. En dépit du nommage du paquet qui contient explicitement le terme ‘book’ (‘livre’ en anglais), le paquet bookdown ne trouve pas sa seule utilité dans la production de livres. Ou plutôt, le “livre” qu’il produit peut-être vu comme l’agrégation d’un ensemble de documents R Markdown destinés à être lus de manière linéaire, tels qu’une compilation de cours, un rapport d’étude, un manuel d’utilisation, une thèse ou même un journal. Il faut cependant signaler l’esprit qui a conduit l’auteur Yihui Xie à élaborer ce paquet : faciliter la génération d’un livre sous de multiples formats, tout en restant sobre, c’est-à-dire en essayant de ne couvrir que les fonctionnalités communes à tous ces formats et en préservant la même syntaxe à travers la sélection de formats retenus dans son projet : html, pdf, epub. 10.1 Démarrer un projet de livre de la page blanche Après cette présentation rapide du paquet bookdown, il est temps d’aborder les aspects pratiques de son utilisation en essayant de répondre à une première question : comment puis-je créer mon premier livre avec bookdown ? 10.1.1 Installer le package bookdown install.packages (&quot;bookdown&quot;) library (bookdown) Remarque Il faudrait se mettre d’accord sur la manière de renvoyer vers les différentes méthodes d’installation. ANS: Je suis d’accord. l’installation “de base” pourrait etre faite dans la 1ere partie de la formation. Dans la 2eme partie nous allons installer TinyTex pour générer du PDF. On pourrait compléter cette partie et faire un renvoi. — CCn Pour un environnement avec un éventail de fonctionnalités aussi complète que possible tel présenté et discuté dans les lignes qui suivent il vous faudra installer aussi un distribution $ $. Très grossièrement l’environnement $ $ est un des rares produits libres à pouvoir générer du pdf. C’est un environnement qui repose sur des concepts très soucieux du respect de conventions typographiques. Ainsi, des commandes insérées dans le texte permettent d’en dicter avec une précision extrême la répresentation finale, la mise en forme pour impression. Si vous ne souhaitez pas vous cassez la tête et si vous n’avez pas les droits d’administration sur votre poste, procédez à l’installation de la distribution TinyTex tout spécialement préparée pour cela par l’auteur même du package bookdown Xie Yihui, d’autant qu’il l’a rendue c’est extrêmement simple cette opération pour quiconque pratique un peu de R} puisque tout se passe justement dans sa console : # Note : il faut avoir un windows au moins de version 10 install.packages(&#39;tinytex&#39;) prop_inst_path &lt;- file.path(Sys.getenv(&#39;LOCALAPPDATA&#39;), &#39;TinyTex&#39;, fsep=&#39;\\\\&#39;) create.dir(prop_inst_path) tinytex::install_tintex(dir=prop_inst_path) 10.1.2 Initialiser un modèle de livre Il s’agit non pas de chercher l’entrée de menu correspondante dans l’entrée Fichier&gt;Nouveau fichier mais bien sous le chemin Fichier&gt;Nouveau projet.... En effet, à la différence des manipulations qui ont été abordées précédemment dans ce guide, le système bookdown est tout entier tourné vers la conversion d’un ensemble de fichiers pour les assembler en une série logique monolithique. Il est donc intéressant de s’en rendre compte en utilisant les modèles de démonstration mis à notre disposition par RStudio. En effet, lorsque nous recourrons au menu de création d’un nouveau bookdown ce n’est pas une structure vierge qui va être initialisée mais bien un document modèle complètement fonctionnel. Il va être établi dans le répertoire que nous aurons préalablement désigné. 10.1.3 Générer le livre et le (re)lire Pour créer un nouveau livre, il faut aller dans Fichier&gt;Nouveau projet.... Une pop-up apparait nous demandant à partir de quoi créer ce nouveau projet. Comme nous souhaitons créer un livre à partir de rien alors on choisit Nouveau Dossier. Apparait alors une selection de type de projet possible. Cette liste dépend des packages installés dans votre RStudio. Il faut selectionner Book project using bookdown. Enfin, il faut spécifier une localisation dans notre espace de fichier et éventuellement de préciser un format (soit gitbook, soit bs4_book. Nous avons alors à disposition un exemple de source complètement fonctionnel. Mais ce ne sont que des sources, comme nos fichiers Rmarkdown précédents, pour véritablement se rendre compte du résultat final, il faut procéder à l’étape de rendu. Ce qui nous amène à explorer plus avant les principes d’organisation de RStudio en tant qu’interface. Si l’organisation initiale n’a pas été trop bouleversée, le cadran haut-droit regroupe un certain nombre d’onglets qui ont tous plus ou moins trait à l’environnement du projet et à son pilotage. Il y réside notamment un onglet Build (Construire) qui dans son menu propose un bouton avec une icône représentant un marteau qui va nous permettre de lancer le rendu (la construction) de l’ensemble de fichiers Rmarkdown. Par défaut le rendu sera sous une forme de “site web” très en usage en ce qui concerne les manuels logiciels sur Internet. La construction de manière effective s’éxécute en appuyant sur le bouton et, après le défilé d’un certain volume d’informations rendant compte des différent traitements effectués, si tout se passe bien, une fenêtre (navigateur web interne de RStudio) s’ouvre au premier plan. Elle présente le rendu final et un bouton qui permet d’ouvrir et d’explorer le rendu dans le navigateur web configuré pour le système hôte. Le document résultant de la phase de construction est pour le coup une véritable vitrine qui présente et montre à l’oeuvre les principales fonctionnalité de bookdown. 3 pour le prix d’1 ! Si vous avez la curiosité d’explorer le sous-répertoire _book du dossier projet, vous y trouverez aussi le rendu sous forme d’un “livre” en pdf (format reconnu princpalement pour sa portabilité en matière d’impression) et encore en epub (format adapté pour la lecture notament sur liseuse mais plus généralement pour tout écran portafif). 10.1.4 Se lancer dans l’écriture À ce stade rien de plus simple, ni rien de bien différent de ce qui a été vu précédemment: il s’agit d’éditer des fichiers R Markdown, (extensions .Rmd). Relancer la construction (compilation?) pour se rendre compte de l’évolution du contenu. Des chapitres en trop, ou des chapitres à rajouter ? Il suffit de supprimer ou de créer les fichiers Rmarkdown correspondant. Ils seront ordonnés automatiquement selon leur ordre alphabétique, c’est pour cela que bien souvent vous trouverez des fichiers numérotés 01-..., 02-... ce qui est une manière très explicite de maîtriser l’ordre de composition du document général. 10.2 Composer son livre quand la matière est déjà disponible Un rapport bookdown contient de manière caractéristique plusieurs chapitres et chacun de ces chapitres est un fichier R Markdown, portant l’extension .Rmd. Ces fichiers R Markdown doivent débuter immédiatement après l’en-tête par le titre du chapitre en utilisant le marquage propre à un titre de premier niveau, par exemple : # Titre du chapitre. Pour le bon fonctionnement général, tous les fichiers R Markdown doivent être encodés en UTF-8, notamment pour les langages présentant des caractères accentués (comme le français). Trucs &amp; Astuces Sans être très féru de tout ce qui concerne l’encodage, vous trouverez un certain nombre de facilités dans RStudio: pour ouvrir un fichier avec l’encodage qui vous convient Fichier \\(\\Rightarrow\\) Réouvrir avec encodage… pour enregistrer un fichier au bon encodage Fichier \\(\\Rightarrow\\) Sauvegarder avec l’encodage… Concernant la première fonctionnalité “Réouvrir avec encodage…”, dans la fenêtre de dialogue n’hésitez surtout pas à sélectionner UTF-8 et cocher l’option : “Définir comme encodage par défaut pour les fichiers sources”, vous n’aurez ainsi quasiment plus de question à vous poser par la suite. 10.2.1 Illustration pratique d’une composition 10.2.1.1 Faire d’un ensemble une unité Allons maintenant au-delà de l’interface RStudio et du système relativement mécanique de ce que nous appelons le clique-bouton. Non que le clique-bouton n’ait pas sa raison d’être, mais parce que les contingeances auxquelles il est soumis nous brident, pour l’instant encore, dans notre capacité d’exploration et d’analyse. Pour se faire déconnetez votre souris de l’ordinateur, ou désactivez-en le clavier tactile … … vous n’êtes évidemment pas obligés d’en arriver jusqu’à cette extrémité, mais vous avez compris l’idée. Il s’agit maintenant de communiquer en language R. Rappellons-nous que pour rendre (transformer) un fichier source R Markdown en un format de consultation plus généraliste (odt, pdf, docx, html …), le package rmarkdown nous fournit la fonction rmarkdown::render(). bookdown en offre une du même niveau : bookdown::render_book(). La première prend logiquement comme paramètre d’entrée obligatoire un fichier R Markdown (ou markdown tout simple, voire même simplement du R), quand la seconde n’exige même pas d’information car par défaut elle prendra le répertoire en cours pour tenter d’exploiter tous les fichiers .Rmd disponibles afin d’en constituer un livre. Le paramètre input permet toutefois un peu de souplesse en indiquant plus spécifiquement quel répertoire rendre sans être forcément obligé par avance de le définir comme répertoire de travail courant (current working directory : getwd/setwd). Travail dirigé : Objectif Utiliser les 3 .Rmd vu précédemment pour expérimenter la composition d’un book. Prérequis Etapes 10.2.1.2 Vous aviez promis des rendus stylés ! Nous espérons que l’expérimentation précédente vous aura permis de vous rendre compte concrètement de ce qui fait une distinction visible entre les packages rmarkdown et bookdown. À ce stade, nous nous rendons manifestement compte que bookdown satisfait un de ses premiers engagements c’est-à-dire : permettre de constituer une unité offrant une lecture séquentielle (à partir de plusieurs fichiers dans les coulisses). Mais somme toute bookdown ne serait-il qu’un énième générateur de site web statique ? Car enfin ce premier résultat ne détonne finalement pas de ce que nous avons l’habitude de rencontrer maintenant sur le net pour nous aider à comprendre le fonctionnement de tel ou tel programme. D’ailleurs hors les couleurs retenues, fonctionnellement cela ressemble assez aux usuels bouquets de présentation accompagnant les packages alliés au tidyverse dplyr, readr, toutefois nous pourrons – en y regardant bien – voir au bas de la page, généralement à droite, que ceux-ci ont été réalisés avec pkgdown. La formule a tellement séduit que d’autres groupes l’utilisent aussi comme rOpenSci avec son ensemble des paquets dont entre autres dataspice. Mais, dans l’histoire des recettes pour mettre en lumière de la documentation le site https://readthedocs.org/ a lui aussi ses adeptes et nous y trouverons des vestiges d’initiatives fort intéressantes comme r-snippets même si elle ne semble plus maintenue. Pourquoi parler de https://readthedocs.org/ ? Parce que justement la lecture linéaire est ce qui construit la force du système de présentation d’un nouvel outil en structurant l’information dans une construction progressive. C’est le propre du mode d’emploi et le système sphinx (en python) duquel il readthedoc a tiré son inspiration semble avoir devancé un peu l’avènement d’une compagnie qui a eu un certain succès pour la mise en forme de documentations utilisateur https://www.gitbook.com/. D’où le fameux nom gitbook rendant honeur à l’esthétique particulière que fit émerger l’entreprise. D’ailleurs dans l’extraordinaire base d’archive que constitue github avec laquelle gitbook faisait la passerelle (mais qui ne sont pas structurellement liées en tant qu’entreprises à notre connaissance) nous retrouvons une initiative pour exploiter directement les service gitbook depuis les sources d’un package tout autant qu’il existe un package pour produire de la documentation sur le modèle readthedoc. Après cette petite digression, pour faire un tout petit zoom sur l’une des nombreuses rivières qui alimentent la quête perpétuelle visant à trouver le système de documentation parfait (S’il n’y en avait pas ?!), retrounons à la distinction que nous faisions entre pkgdown et bookdown. En effet, nous appelions l’ensemble de pages web formées par pkgdown un bouquet car les pages regroupées font sens ensemble et la barre des menus vient même structurer cet ensemble par une certaine codification, convention. Mais dans bookdown, il y a vraiment un ordre, une progression, une linéarité. Et mécaniquement cette linéarité peut s’apposer successivement sur un ensemble de pages et forme naturellement un livre et c’est aussi cet engagement que porte bookdown. Dans la pratique, comment devons-nous poursuivre nos manipulations pour obtenir un fichier pdf ? Réponse : simplement en passant une option spécifiant que c’est le format attendu. bookdown::render_book(output_format = &#39;bookdown::pdf_book&#39;) à l’issue du traitement vous aurez un retour d’information vous signalant que votre pdf est servi ! Output created: _book/_main.pdf La valeur de retour de la fonction elle-même est d’ailleurs le chemin complet vers le fichier créé. Et si nous voulions générer plusieurs mode de document simultanément ? bookdown::render_book(output_format = c(&#39;bookdown::pdf_book&#39;,&#39;bookdown::gitbook&#39;)) Laissez libre court à vos envies et explorez parmi les multiples modèles de sortie proposés soyez conscient de leur limite et des contraintes qu’ils imposeront mais aussi posez-vous la question de ce que vous voulez vraiment faire : les formats dits : Book output format qui justifient notre intérêt jusqu’ici parce qu’ils travaillent sur un ensemble de fichiers : gitbook pdf_book epub_book bs4_book bs4_book_theme html_chapters html_book tufte_html_book les formats dit : “Single document output formats” qui ne travaillent que sur un seul fichier .Rmd mais qui rétro-portent à rmarkdown certaines fonctionnalités comme les renvois internes : html_document2 html_fragment2 html_notebook2 html_vignette2 ioslides_presentation2 slidy_presentation2 tufte_html2 pdf_document2 beamer_presentation2 tufte_handout2 tufte_book2 markdown_document2 context_document2 github_document2 odt_document2 powerpoint_presentation2 rtf_document2 word_document2 10.2.1.3 Maîtrise des méta-données Si jusqu’ici vous vous êtes prétés au jeux des manipulations que nous vous proposons, il n’aura pas échappé à votre oeil aguerri que la gestion des métadonnées (titre, auteur, date) n’est pas si intuitive que cela. Confirmons-le par une petite manipulation. TD Dans les faits le dernier header yaml écrase les précédents. Aussi, l’usage veux que le premier chapitre débute dans le fichier index.Rmd, convention qui nous vient du monde du web, des serveurs et de l’html, et que seul ce fichier comporte un header yaml. 10.2.2 Organisation des sources d’un bookdown Après avoir mis les mains dans le cambouis et constitué notre book, notre livre ou notre rapport à la main, appelez-le comme il vous convient, revenons à l’exemple standard pour démystifier les nombreux fichiers nécessaires de prime abord et en comprendre l’utilité. bookdown::create_bs4_book(&#39;../mybs4book&#39;) setwd(&#39;../mybs4book&#39;) list.files() bookdown::render_book(output_format = &#39;bookdown::bs4_book&#39;) _bookdown_files _book mybs4book.Rproj README.md index.Rmd 01-intro.Rmd 02-cross-refs.Rmd 03-parts.Rmd 04-citations.Rmd 05-blocks.Rmd 06-share.Rmd 07-references.Rmd _bookdown.yml _common.R _output.yml preamble.tex style.css book.bib packages.bib chicago-fullnote-bibliography.csl mybs4book.rds 10.3 Au-delà du fond s’attaquer aux goûts et couleurs Si vous nous avez lu jusqu’ici dans notre découverte pratico-pratique du package bookdown, de sa place dans l’écosystème des publications reproductibles qui reviennent sur le devant de la scène et prennent un nouveau jour, alors : félicitations ! De notre côté, il nous semble que les éléments fournis jusqu’ici dans un accompagnement par la manipulation doivent vous permettre desormais de produire vos livres sans problème. Il nous resterait encore à aborder deux autres fonctionnallités de bookdown pour être totalement complet, ce sont : les liens de renvoi internes, l’utilisation de référence bibliographique, ces facettes seront couvertes dans une édition ultérieure de ce document (pour l’instant des liens seront données en fin de chapitre à l’attention de ceux pour qui ces fonctionnalités sont indispensables). Mais, excepté ces deux fonctionnalités spécifiques d’ailleurs peu fréquentes d’utilisation dans nos métiers, considérons pour l’heure que vous êtes désormais un utilisateur éclairé de bookdown. La partie à laquelle nous nous attaquons ici a pour but de vous faire atteindre le niveau maîtrise. Partons du postulat que sitôt vous aurez modelé votre matière de fond en un livre, sitôt vous vous direz que cette production ressemble à toutes les autres, or, vous voudrez plutôt quelle vous ressemble ! Nous allons tenter de voir en suivant quelles sont vos options pour cela et à l’occasion ce balayage nous emmenera à investiguer un peu plus profodémment quelques aspects techniques du package bookdown. 10.3.1 Les types de sorties, ou les différents rendus possibles Dans la section @ref(#styled-outputs) nous avons vu qu’à partir d’un même projet source bookdown nous pouvions choisir entre différents types de sorties, nous devons maintenant être plus précis que cela. Dans la pratique, il y a plusieurs étages à la fusée, en effet tout part du format terminal d’enregistrement sur le disque dur autrement dit : en quel type de fichier va être converti notre projet bookdown in fine. Concentrons nous sur les transformations mères (Book output format), celles-là mêmes qui au départ ont motivées la création de bookdown au-delà de l’apparente multiplicité des types de sorties possibles, pas moins de 8 (gitbook, pdf_book, epub_book, bs4_book, bs4_book_theme, html_chapters, html_book, tufte_html_book), il n’est en fait question que de trois types de fichiers : pdf, epub et html. Notons tout de suite l’exception du format de fichier html, c’est le seul format où la transformation bookdown et plus généralement rmarkdown se traduit *matériellement” par plusieurs fichiers, c’est sa nature même. En clair, la résultante d’une transformation source bookdown en l’un des types de sorties (git_book,, bs4_book, bs4_book_theme, html_chapters, html_book, tufte_html_book) va résulter en la création d’un répertoire nommé par défaut _book dans le répertoire projet. Ce répertoire _book va contenir quantité de fichiers constituant un mini-site statique (ensemble de pages web cohérent) qui s’appuie sur une grande variété de type de fichiers : html bien évidemment, css, javascript, des resources liées (images, icônes, fichiers de police de charactère et autres), bref tout un écosystème. La magie du web repose sur quelques conventions, par exemple une fois ce répertoire _book mis sur un serveur internet (appelons le https://mon-site.com), s’il contient un fichier nommé index.html alors l’appel du répertoire 2 http:://mon-site.com/_book/ par un navigateur quelconque (Chrome, Firefox, Edge …) ouvrira naturellement cette page index.html évitant à devoir invoquer explicitement la page d’entrée par son nommage exact. C’est pourquoi la convention de débuter par un fichier index.Rmd fait sens. Nous le voyons rien que cette précision sur les types de sorties reposant sur le format html peut appeler à de longues digressions si l’on vise l’exhaustivité didactique. C’est hors de portée pour nous dans le cadre de ce modeste support de formation. La difficulté d’expliquer s’étend aussi au format pdf et epub qui ne sont pas plus simples, alors notre pirouette sera de vous renvoyer vers les documents fondateurs de ces formats, ce qu’on appelle les spécifications, mais même en faisant cela vous ne serez pas encore arrivés pour certaines raisons que nous commentons : spécifications epub le lien donné ici renvoi vers le format en version 3.2, oui notons au passage que les formats évoluent et s’améliorent avec le temps, le standard epub est pris en premier exemple, car le curieux ou le téméraire pourrait se dire : il suffit que je connaisse ça. L’organisme de publication W3C est complètement transparent, tout est publié est accessible gratuitement. spécification html, les choses se compliquent l’histoire et en marche, le W3C publié originellement des spécifications versionnées, mais le html est tellement stratégique et central aujourd’hui que non seulement une nouvelle institution est née, mais en plus les spécifications s’affirment elles-mêmes comme vivantes. spécifications pdf l’histoire du format pdf possède aussi des détours, et là les choses se corsent encore plus pour accèder à la connaissance totale puisque l’organisme qui à normaliser ces spécifications est l’ISO et qu’il faut s’acquitter monaitairement de certains droits pour pouvoir accèder au document valant norme. L’équipe d’auteurs de ce document a-t’elle lu ces spécifications ? Pas du tout ! Heureusement d’ailleurs, car cela aurait peut-être été une perte de temps collosale par rapport à nos besoins directs, et même parfois inutile. Dans le cadre du pdf cela aurait été du pur temps perdu et inutile puisque en fait bookdown lui-même ne produit pas directement du pdf mais un format intermédiaire dans un langage appelé \\(\\LaTeX\\). 10.3.2 Un choix esthétique cadré Parfois vous pouvez vouloir changer le thème global de sortie, et de manière générale ce peut-être réalisé grâce à l’option in_hearder, ou l’option css plus particulièrement adaptée pour les sorties HTML. Certains formats de sortie ont leur propre thème, tel que gitbook, tuft_html_book, et tufte_book2, d’ailleurs cela vous ne devriez pas souhaitez les modifier de trop, d’abord parce qu’ils tendent vers des objectifs très précis ensuite par que techniquement le effort pour les modifier seront importants puisqu’ils reposent sur des mécaniques complexes. Par comparaison les formats de sortie html_book() et pdf_book() ne sont pas attachés à des thèmes spécifiques en conséquence ils peuvent être facilement modifiables et adaptables. Ainsi, le thème de défaut, ou style, pour html_book() est le style nommé Bootstrap. Le style Bootstrap possède lui-même en réalité plusieurs choix de thème auxquels vous pouvez reccourir, votre choix s’étend parmis les valeurs : default, bootstrap, cerulean, cosmo, darkly, flatly, journal, lumen, paper, readable, sandstone, simplex, spacelab, united, and yeti. Vous pouvez indiquez lequel de ces thèmes vous voulez appliquer en paramétrant l’option theme comme suit : --- output: bookdown::html_book: theme: united --- Si éventuellement il advenait que vous n’apréciiez aucun des thèmes proposé par Bootstrap, il vous reste le recours de fixer l’option theme à null et d’appliquer votre propre feuille de style css, grâce aux options (css ou in_header). Pour le format de sortie pdf_book(), en plus de l’option in_header déjà évoquée, une autre solution est de changer la classe (documentclass) de document. Il existe de très nombreuses classes possibles pour les mise en forme de type livres, telles que memoir (https://www.ctan.org/pkg/memoir), amsbook (https://www.ctan.org/pkg/amsbook), KOMA-Script (https://www.ctan.org/pkg/koma-script) et bien d’autre. Voici un bref example de l’entête de données YAML pouvant permettre de déclarer le thème de sortie scrbook proposé au travers de l’extension \\(LaTeX\\) KOMA-Script : --- documentclass: scrbook output: bookdown::pdf_book: template: null --- A titre d’information, quelques maisons d’édition spécialisées (telles que Springer et Chapman &amp; Hall/CRC) disposent de leur propre style \\(LaTeX\\), de leur propre fichiers de classe (.sty). Dans ce cas là vous pourriez essayer de changer l’option documentclass afin de spécifier en lieu et place celle de leur style, mais vous constaterez que bien souvent ce n’est pas aussi simple que cela. Votre recours le plus efficace sera soit d’utiliser l’option in_header soit plus surement encore d’aller modifier le modèle de document de sortie \\(LaTex\\) utilisé par Pandoc pour l’adapter à ces feuilles de style particulière. Notez bien par ailleurs que lorsque vous changez le paramètre documentclass, vous êtes suscceptibles de spécifier un paramètre Pandoc aditionnel --top-level-division=chapter afin que Pandoc sache bien quel premier niveau de titres il doit traiter comme chapitre en lieu et place des sections (c’est en effet le fonctionnement par défaut quand la documentclass est book, autrement dit pour une structuration du rendu en mode ‘livre’), les options s’exprimeraient par exemple ainsi : documentclass: krantz output: bookdown::pdf_book: pandoc_args: --top-level-division=chapter 10.3.3 Polices de caractères et couleurs, imposez votre style Revenons sur l’option output/includes/in_header. Cette option prend en paramètre un nom de fichier et va permettre d’insérer simplement aux environs des premières lignes du fichier html qui sera généré en sortie (exactement dans son entête&lt;head&gt;) le contenu dudit fichier pour influer sur la mise en forme des différents composants et de leur rendu final. Cette adaptation présuppose évidement une certaine maîtrise du html et du sous langage de domaine spécifique qui lui est associé pour stylisation : le css. Le html (et le css) sortent du cadre de notre guide et nous devons vous renvoyer vers des ressources extérieures, cela étant, il s’agit de standards ouverts et vous ne devriez avoir aucun mal à trouver sur l’Inter de quoi rasasier envie d’apprendre, le tutoriel du W3C “Débuter avec HTML + CSS” nous semble un bon point d’attaque. 10.3.4 Un choix esthétique cadré 10.4 Quelques options et détails techniques complémentaires 10.4.1 Options triées sur le volet 10.4.2 Retour sur le fonctionnement global 10.5 Etude d’un exemple bookdown : propre.rpls 10.5.1 Exemple d’appropriation d’une publication Rpls 10.5.2 Compréhension globale de l’architecture du paquet propre.rpl 10.6 Focus sur l’envoi au photocopieur du livre ou comment imprime 10.7 Bookdown, maintenant et au-delà quarto dans la pratique le chemin sur un serveur s’appelle une URL↩︎ "],["du-rmarkdown-interactif.html", "Chapitre 11 Du Rmarkdown interactif 11.1 Interactivité simple, les visuels s’animent 11.2 Interactivité avancée, les inputs utilisateur 11.3 Exercice X 11.4 Interactivité complète, l’application Shiny embarquée", " Chapitre 11 Du Rmarkdown interactif Quand notre produit de sortie est un pdf, on va vouloir générer des graphiques et cartes qui ont le comportement d’une image simple. C’est ce que nous avons fait depuis le début de ce cours. Mais de plus en plus de nos projets sont destinés à une publication web et un certain niveau d’interactivité est souhaité. La considération principale à prendre en compte est l’environnement de déploiement. Si mon document est hebergé sur un serveur R, j’ai la possibilité de lui faire exécuter du code R “en direct” en fonction des actions de l’utilisateur. Dans le cas contraire, il faudra utiliser de l’interactivité en javascript. Ce langage est interprété et exécuté directement par le navigateur du client (celui qui consulte la page). Mais pas d’inquiétude, vous pouvez continuer à coder uniquement en R, le javascript est caché derrière. 11.1 Interactivité simple, les visuels s’animent Lorsqu’on choisit le HTML comme format de sortie, on peu utiliser toutes les possibilités d’animation des cartes et graphes vus dans le module 5 - “Valoriser ses données avec R”. Vous pouvez intégrer des cartes leaflet, des cartes et graphiques ggiraph, des graphiques plotly et bien d’autres qui offrent des possibilités d’animations au survol, d’infobulles, de zoom etc. Ces widgets en nécessitent pas de déploiement sur un serveur R pour fonctionner. Ils sont exécutés par le navigateur client. On parle ici d’interactivité simple car il s’agit uniquement d’effets visuels dans le comportement des widgets mais il n’y a aucune modification des données dépendante de l’utilisateur. 11.2 Interactivité avancée, les inputs utilisateur Dans certains cas, on souhaite que l’utilisateur puisse directement influencer les visuels, en filtrant une sous-partie du jeu de données par exemple. Il existe une solution qui permet cela tout en restant dans le cadre d’une exécution par le navigateur client : le package Crosstalk. Le fonctionnement de base est très simple, on transforme notre objet (la dataframe qui contient les données affichées) en un objet partagé (shared object en anglais) : library(crosstalk) dataframe_partagee -&gt; SharedData$new(dataframe) Regardez comme cela est noté dans l’environnement de travail. On peut spécifier un argument qui indique le nom d’une colonne de valeurs toutes différentes permettant d’identifier les lignes de manière unique. On peut voir ça comme une clé primaire en gestion de base de données. Par défaut Crosstalk utilise le numéro de ligne. dataframe_partagee -&gt; SharedData$new(dataframe, ~identifiant) À partir de là, on peut utiliser cet objet partagé à la fois dans un widget de filtre, dans un tableau et dans une carte dynamique pour que l’utilisateur puisse filtrer ses objets à afficher. library(crosstalk) library(leaflet) library(DT) dataframe_partagee -&gt; SharedData$new(dataframe, ~identifiant) filter_select(id = &quot;mon_filtre&quot;, label = &quot;Choisissez un identifiant&quot;, sharedData = dataframe_partagee, group = ~identifiant) datatable(dataframe_partagee, ...) leaflet(dataframe_partagee) %&gt;% addPolygons(...) 11.3 Exercice X A FAIRE - repartir de l’exemple de book LS par région et remplacer par une page seule avec filtre par région avec Crosstalk. 11.4 Interactivité complète, l’application Shiny embarquée Rappels intéractivité graphes et cartes M5 Exemple intégration Shiny Exemple intégration Crosstalk Formation publications reproductibles avec RMarkdown 2 - Les principaux templates pour créer des publications Maël THEULIERE - Marouane ZELLOU Derrière Rmarkdown aujourd’hui existe tout un ecosystème permettant de mixer des traitements réalisés en R et du texte dans des formats très différents, que ce soit en matière de technologie (html, pdf, …) ou de type de rendu (diaporama, rapport, livre, note, cv, …). "],["déroulé.html", "Chapitre 12 Déroulé 12.1 Bookdown 12.2 Pagedown 12.3 Officer 12.4 La structure du projet - _bookdown.yml", " Chapitre 12 Déroulé 12.1 Bookdown 12.2 Pagedown 12.3 Officer Le format Bookdown permet de gérer des projets Rmarkdown plus large qu’un simple document de quelques pages. Par ailleurs, le format bookdown apporte plusieurs améliorations : Les livres et les rapports peuvent être créés à partir de plusieurs fichiers R Markdown. Des fonctionnalités de mise en forme supplémentaires sont ajoutées, telles que les références croisées et la numérotation des figures, des équations et des tableaux. Les documents peuvent être facilement exportés dans une gamme de formats adaptés à la publication (PDF, epub, HTML). Installer bookdown depuis le CRAN install.packages(&#39;bookdown&#39;) Depuis Rstudio, cela vous apporte un nouveau type de projet, accessible depuis File -&gt; New Project -&gt; New Directory -&gt; Book Project using bookdown. Une fois celui ci créé, vous pouvez cliquer sur Build book dans l’onglet Build de Rstudio. Cela vous compilera le document en html, qui sera accessible dans le répertoire du projet et visible par défaut dans le viewer. Quand vous créé un projet bookdown, vous avez dans votre projet automatiquement les fichiers suivants : index.Rmd, le seul fichier Rmarkdown qui contient comme usuellement un yaml en entête. C’est le premier chapitre de votre livre. 01-intro.Rmd à 06-references.Rmd des fichiers rmarkdown correspondant aux chapitres de vos livres. La structure classique d’un rmarkdown est un document Rmd par chapitre, qui seront ensuite pour la version html votre premier niveau de navigation. Chaque fichier comment par le titre du chapitre. _bookdown.yml Un fichier de configuration de votre document bookdown. _output.yml Un fichier de configuration des formats de sortie de votre document (pdf, html…). book.bib un fichier de bibliographie au format BibTeX. preamble.tex et style.css des fichiers de configuration de l’apparence de votre document pour sa version pdf (réalisé en LaTeX) et sa version html (réalisé en css). directory/ ├── index.Rmd ├── 01-intro.Rmd ├── 02-literature.Rmd ├── 03-method.Rmd ├── 04-application.Rmd ├── 05-summary.Rmd ├── 06-references.Rmd ├── _bookdown.yml ├── _output.yml ├── book.bib ├── preamble.tex ├── README.md └── style.css La balise yaml du fichier index.Rmd contient des options spécifiques au format bookdown sur la gestion de la bibliographie. title: &quot;A Minimal Book Example&quot; author: &quot;Yihui Xie&quot; date: &quot;2025-01-17&quot; site: bookdown::bookdown_site documentclass: book bibliography: [book.bib, packages.bib] biblio-style: apalike link-citations: yes description: &quot;This is a minimal example of using the bookdown package to write a book. The output format for this example is bookdown::gitbook.&quot; 12.4 La structure du projet - _bookdown.yml Le fichier _bookdown.yml permet de spécifier des options de configuration supplémentaires pour construire le livre. Par exemple : changer le nom du fichier (book_filename) franciser le préfixe devant le numéro du chapitre (chapter_name) ou le préfixe des tableau et des graphiques (fig et tab) changer l’ordre de fusion des fichiers (rmd_files) book_filename: &quot;mon_premier_bookdown&quot; delete_merged_file: true language: ui: chapter_name: &quot;Chaptitre &quot; label: fig: &quot;Graphique &quot; tab: &quot;Tableau &quot; rmd_files: [&quot;index.Rmd&quot;, &quot;01-intro.Rmd&quot;, &quot;05-summary.Rmd&quot;] Le fichier _output.yml est utilisé pour spécifier les type de format de sortie (pdf, html…) et les options relatives à ces formats. Pour le format html, c’est là par exemple que vous pouvez spécifier entre autre : la feuille de style css à utiliser les textes inscrit en haut et en bas du menu de navigation les options de partage sur les réseaux sociaux que vous voulez (si vous en voulez, vous pouvez aussi tous les désactiver avec l’option sharing ci contre) bookdown::gitbook: css: style.css config: toc: before: | &lt;li&gt;&lt;a href=&quot;./&quot;&gt;Mon premier bookdown&lt;/a&gt;&lt;/li&gt; after: | &lt;li&gt;Mon premier bookdown&lt;/li&gt; download: [&quot;pdf&quot;, &quot;epub&quot;] sharing: no info: no Vous pouvez exclure un chapitre de la numérotation, en rajoutant {-} devant son nom dans le fichier Rmd. Vous pouvez structurer vos chapitres en partie. Pour commencer une partie rajouter # ( PART) Nom de votre partie {-} devant un chapitre. "],["pagedown-1.html", "Chapitre 13 Pagedown 13.1 Pagedown 13.2 Paged.js", " Chapitre 13 Pagedown 13.1 Pagedown Pagedown est une implémentation pour Rmarkdown de paged.js, qui permet de réaliser des documents html paginés. 13.2 Paged.js paged.js est une bibliothèque javascript visant à mettre en oeuvre [les propriétés css dédiées au médias paginés(https://www.w3.org/TR/css-page-3/) du W3C. Ces spécifications visent à pouvoir réaliser des documents prêt pour l’impression avec les technologies du web (html, css, js). Ces spécifications sont toujours en draft pour le moment au sein du W3C, donc pas vraimente reconnues par les principaux navigateurs. D’où le besoin de cette bibliothèque javascrit pour pouvoir les mettre en oeuvre. ] Pour installer pagedown depuis le CRAN : install.packages(&#39;rstudio/pagedown&#39;) Depuis Rstudio, cela vous apporte un nouveau type de document rmarkdown, accessible depuis File -&gt; New File -&gt; Rmarkdown... -&gt; From template -&gt; Paged HTML document. Une fois celui ci créé, vous pouvez cliquer sur knit de l’interface de Rstudio. Cela vous compilera le document par défaut en html, qui sera accessible dans le répertoire du projet et visible par défaut dans le viewer. La structure du yaml est relativement proche d’un document Rmarkdown classique. A noter toutefois une option utile à retenir, la balise knit: pagedown::chrome_print qui vous permet de compiler directement votre document en pdf grâce à la fonction pagedown::chrome_print() livrée dans le package. Cette fonction par ailleurs peut être utilisée pour imprimer en pdf tout document html en pdf ou en format image. Elle utilise la technologie d’impression de google chrome. title: &quot;A Multi-page HTML Document&quot; author: &quot;Yihui Xie and Romain Lesur&quot; date: &quot;2025-01-17&quot; output: pagedown::html_paged: toc: true \\# change to true for a self-contained document, but it&#39;ll be a litte slower for Pandoc to render self_contained: false \\# uncomment this line to produce HTML and PDF in RStudio: \\#knit: pagedown::chrome_print "],["configurer-votre-yaml.html", "Chapitre 14 Configurer votre yaml", " Chapitre 14 Configurer votre yaml Voici quelques options du yaml intéressantes à connaître : toc-title: sommaire Pour modifier le nom du sommaire du document. lot: true lot-title: &quot;Tableaux&quot; lof: true lof-title: &quot;Graphiques&quot; Pour ajouter et configurer une liste de tableau et de graphique dans le sommaire. Si vous ne voulez pas que les graphiques et tableaux apparaissent dans le sommaire, vous pouvez utiliser lot-unlisted: true. chapter_name: &quot;Chapitre\\\\ &quot; Pour modifier le préfixe du titre du chapitre. Vous pouvez ensuite insérer un chapitre en utilisant # Ceci est un titre de chapitre {.chapter} "],["configurer-votre-yaml-1.html", "Chapitre 15 Configurer votre yaml", " Chapitre 15 Configurer votre yaml Voici quelques options du yaml intéressantes à connaître. links-to-footnotes: true Cette option transforme automatiquement un lien url dans votre document en note de bas de page. Ainsi [CRAN](https://cran.r-project.org/) sera traduit comme [CRAN^(https://cran.r-project.org/). ] pagedown::html_paged: front_cover: !expr system.file(&quot;help&quot;,&quot;figures&quot;,&quot;lter_penguins.png&quot;,package = &quot;palmerpenguins&quot;) back_cover: https://www.r-project.org/Rlogo.png Pour rajouter une image pour la première de couverture et la 4ème de couverture. On peut utiliser le prefix !expr pour insérer du code R créant en sortie une image. # Quelques balises importantes à connaître `.page-break-before` et `.page-break-after` vous permettent d&#39;insérer un saut de page. ```md ### Nouveau chapitre après un saut de page {.page-break-before} [Chapitre 1] vous permet de rajouter un lien vers la section Chapitre 1. "],["modifier-le-css.html", "Chapitre 16 Modifier le CSS", " Chapitre 16 Modifier le CSS Apprendre à customiser un document pagedown va vous demander d’investir sur l’apprentissage du CSS en général et de pagedjs en particulier pour construire un template ad hoc. C’est un investissement en soit, qui pourra vous être utile de la même façon que la gestion de la mise en page d’un document bureautique. Vous pouvez aussi centraliser cet investissement pour votre équipe sur une ou deux personnes, ou travailler avec votre service web sur vos projets. Quelques ressources pour apprendre le CSS : Le site de la fondation Mozilla Le site du W3C "],["modifier-le-css-1.html", "Chapitre 17 Modifier le CSS", " Chapitre 17 Modifier le CSS Voici déjà quelques recettes de base pour commencer à modifier votre document. Première étape : importer les css par défaut de pagedown dans votre document. files &lt;- c(&quot;default-fonts&quot;, &quot;default-page&quot;, &quot;default&quot;) from &lt;- pagedown:::pkg_resource(paste0(&quot;css/&quot;, files, &quot;.css&quot;)) to &lt;- c(&quot;custom-fonts.css&quot;, &quot;custom-page.css&quot;, &quot;custom.css&quot;) file.copy(from = from, to = to) Ajouter une référence à ces fichiers dans le yaml : output: pagedown::html_paged: css: - custom-fonts.css - custom-page.css - custom.css toc: true self_contained: false "],["modifier-le-css-2.html", "Chapitre 18 Modifier le CSS", " Chapitre 18 Modifier le CSS Lancer dans la console xaringan::inf_mr(), qui permet de compiler un document Rmarkdown en ayant un aperçu live du rendu. Appuyer ensuite sur Show in new window pour consulter le document sur votre navigateur par défaut. Puis sur Clear all viewer item, pour que vos modifications puisse s’afficher en live. 18.0.0.1 Configurer votre document pagedown "],["modifier-le-css-3.html", "Chapitre 19 Modifier le CSS", " Chapitre 19 Modifier le CSS Vous pouvez commencer à modifier vos fichiers css et voir le résultats immédiatement. Les 3 fichiers correspondent aux éléments suivants : custom-fonts.css correspond aux polices de caractères custom-page.css correspond aux paramètres de la page (format de la page, orientation,…) custom.css intègre entre autre la façon dont les pages sont affichées à l’écran (couleur de fond, espacement entre les pages…) {pagedreport} est un package permettant de simplifier l’appropriation de pagedown, et notamment évite de devoir rentrer tout de suite dans une modification du css. Il n’est pas encore sur le cran, pour l’installer : remotes::install_github(&quot;rfortherestofus/pagedreport) {pagedreport} vous simplifie l’utilisation de pagedown en proposant trois templates avancés paramétrables via de nouvelles options à intégrer dans le yaml : paged_grid::logo vous permet d’ajouter le logo de votre institution à votre rapport paged_grid::logo vous permet d’ajouter le logo de votre institution à votre rapport paged_grid::front_img et paged_grid::back_img vous permettent de choisir deux images pour la première et la quatrième de couverture. main-color et secondary-color vous permette de choisir les couleurs principales et secondaires de votre document. main-font et header-font vous permettent de choisir une police de caractère pour le texte et vos titres. Si google-font est à TRUE, vous pouvez sélectionner toute police disponible sur google font. subtitle: &quot;Au 1er juin 2021&quot; author: &quot;Guillaume RRRRRozier&quot; date: &quot;11 juin 2021&quot; output: pagedreport::paged_grid: logo: &quot;https://upload.wikimedia.org/wikipedia/fr/7/72/Logo_du_Gouvernement_de_la_R%C3%A9publique_fran%C3%A7aise_%282020%29.svg&quot; knit: pagedown::chrome_print toc-title: &quot;Sommaire&quot; main-color: &quot;#000091&quot; secondary-color: &quot;#000091&quot; google-font: TRUE main-font: &quot;Open Sans&quot; header-font: &quot;Open Sans&quot; "],["pour-aller-plus-loin.html", "Chapitre 20 Pour aller plus loin 20.1 Les documents Quarto 20.2 Affichages sur plusieurs colonnes 20.3 Autres formats de sortie 20.4 odt_document –&gt; TODO 20.5 reference .R files 20.6 Le cache 20.7 Bibliographie", " Chapitre 20 Pour aller plus loin 20.1 Les documents Quarto 20.2 Affichages sur plusieurs colonnes cela se fait très bien en format PDF, c’est plus compliqué en HTML. Vous pourrez avoir besoin de définir un document en plusieurs colonnes, avec par exemple une illustration sur une moitiée de la page, un texte sur l’autre. Pour cela vous aller devoir séparer vos colonnes dans des “div”. Dans rmarkdown, des div commencent par ::: {} et finissent par :::. Pour ensuite que le document aligne ces blocs l’un à coté de l’autre, vous devrez utiliser la propriété css display: flex; dans une div englobante. ASK: est ce que vous pouvez me donner un exemple à ajouter ? https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html — CCn 20.3 Autres formats de sortie Il existe des packages permettant d’obtenir des formats de sortie spécifiques. A chaque fois il convient de vérifier que ces formats des sorties et votre code sont compatibles. pagedown pour faire du PDF sans Latex? gouvdown? où on trouve la doc? distill? les présentations xaringan ? officer et officedown? 20.4 odt_document –&gt; TODO les tableaux faits en kableExtra et knitr::kable ne sortent pas correctement. les graphiques ne sont pas complets (titres coupés par ex) ce format pourrait etre utile uniquement pour le texte. les graphiques seraient à faire séparement? 20.5 reference .R files 20.6 Le cache Si le temps d’éxecution du code est trop long, il est possible d’utiliser l’option de mise en cache de knitr afin d’améliorer les performances d’éxécution du code. ASK: Est ce qu’on parle de cela ou non? — CCn 20.7 Bibliographie Voici quelques éléments bibliographiques pour en savoir plus sur R Markdown mais aussi tous les packages et logiciels en lien avec ce sujet: Le guide définitif de Rmarkdown Le guide de référence [La syntaxe Markdown sur laquelle s’appuie rmarkdown]`(https://daringfireball.net/projects/markdown/syntax#philosophy) Pour en savoir plus sur PANDOC Pour en savoir plus sur TinyTeX Une vidéo en anglais pour aller plus loin dasn l’utilisation de R Markdown et évidemment les documentations de tous les packages cités! info importante! je n’arrive pas à installer TinyTex avec cette commande: tinytex::install_tinytex(). j’ai une erreur “Error in extract(pkg, exdir = path.expand(target)) : cannot open file ‘C:/Users/caroline.coudrin/AppData/Roaming/TinyTeX/tl-tray-menu.exe’: Permission denied”. du coup je ne peux pas tester le format PDF. "],["rendu-des-exercices-partie-2.html", "Chapitre 21 Rendu des exercices partie 2 21.1 Traitement des données 21.2 Nombre de LS par région 21.3 Graphiques d’évolution 21.4 Pour rappel", " Chapitre 21 Rendu des exercices partie 2 Voici le type de document que vous pourrez générer à la fin de la 1ere journée de formation RMarkdown. Pour cet exercice nous proposons de travailler avec les données RPLS sur le logement social. Pour cela il faut suivre plusieurs étapes: Créer un fichier .Rmd Traiter les données 2.1. Importer les données 2.2. Travailler les données 3.3. Créer des graphiques Ecrire du texte Définir les formats de sortie Générer le document 21.1 Traitement des données Tout d’abord on charge les librairies utiles. library(tidyverse) library(ggplot2) library(readr) library(glue) library(kableExtra) Le fichier des données sur lequel je propose de travailler est une selection des variables RPLS pour la France et les régions, sur plusieurs millésimes. Je l’ai créé à partir du package propre.rpls. Est ce que cela vous convient? 21.2 Nombre de LS par région Au 1er janvier 2022, il y a 5.370446^{6} logements sociaux en France. 21.3 Graphiques d’évolution Voici l’évolution du nombre de logements sociaux en France: On peut faire des traitements R aussi compliqués que de besoin dans les chunks 21.4 Pour rappel Les bases du langage sont très bien expliquées dans Le guide définitif de Rmarkdown "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
