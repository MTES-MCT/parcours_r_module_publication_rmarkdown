[["index.html", "Module 6 - Publications reproductibles avec RMarkdown Chapitre 1 Introduction 1.1 Le parcours de formation 1.2 Objectifs du module 6 1.3 Exemples de productions avec R Markdown", " Module 6 - Publications reproductibles avec RMarkdown Groupe des référents R 10 May 2021 Chapitre 1 Introduction Crédit photographique Pascal Boulin 1.1 Le parcours de formation Ce dispositif de formation vise à faire monter en compétence les agents du MTES (Ministère de la transition écologique et solidaire) et du MCT (Ministère de la cohésion des territoires) dans le domaine de la science de la donnée avec le logiciel R. Il est conçu pour être déployé à l’échelle nationale par le réseau des CVRH (Centre de Valorisation des Ressources Humaines). Le parcours proposé est structuré en modules de 2 jours chacun. Les deux premiers (ou un niveau équivalent) sont des pré-requis pour suivre les suivants qui sont proposés “à la carte” : Socle : Premier programme en R Socle : Préparation des données Statistiques descriptives Analyses multivariées Datavisualisation : Produire des graphiques, des cartes et des tableaux Documents reproductibles avec RMarkdown … et en perspective : analyse spatiale, applis interactives avec Shiny, big data, etc. La mise à disposition des supports de formation se fait désormais par la page d’accueil du parcours de formation. Ces supports sont en licence ouverte. Si vous souhaitez accéder aux sources, données mobilisées pendant les formations, il faut directement les télécharger depuis le Github du ministère. Pour vous tenir au courant de l’offre de formation proposée par le réseau des CVRH, consultez la plateforme OUPS. Vous pouvez vous y abonner pour recevoir les annonces qui vous intéressent. Il existe une liste pour diffuser de l’information, échanger autour de R ou lever des points de blocage. Pour s’insrire, envoyer un message vide avec le titre “subscribe labo.communaute-r” à l’adresse sympa@developpement-durable.gouv.fr. 1.2 Objectifs du module 6 A l’issue de la formation sur ce module, les stagiaires devraient être en capacité de produire une publication reproductible et paramétrable relativement simple de A à Z. Il sera fait appel aux compétences acquises lors des précédents modules, en particulier des modules “socle”. Le langage utilisé est [R Markdown], qui permet d’avoir dans un seul fichier du texte mis en forme, du code (R, mais aussi Python, Julia, C++, SQL et même SAS !) et les sorties du code. Les points abordés comprendront : La syntaxe R Markdown L’insertion de code R Les outils de mise en forme Les formats de sortie .html, .pdf L’assemblage de plusieurs documents R Markdown (package bookdown) La publication des documents produits 1.3 Exemples de productions avec R Markdown R markdown permet de produire des sorties dans un grand nombre de formats. Quelques exemples : Des documents “simples” en format html, word, epub, pdf, etc. Des diaporamas en formats Powerpoint, Beamer, Ioslides, Revealjs, etc. Des tableaux de bord interactifs en combinant avec des widgets html ou des éléments produits par le package shiny. Exemple Des pages web statiques comme des supports de formation Des publications paramétrables faciles à mettre à jour Conjoncture logement neuf en Pays-de-Loire Dans les Hauts-de-France Et même des livres : R for data science divers autres formats comme des blogs, des sites web, du epub, des diaporamas, etc. "],["la-publication-reproductible.html", "Chapitre 2 La publication reproductible 2.1 Définition 2.2 Bonnes pratiques 2.3 Origine du format R markdown 2.4 Du .Rmd au format de sortie", " Chapitre 2 La publication reproductible 2.1 Définition Le schéma classique pour produire un rapport ou une publication ressemble à ça : Les données mobilisées proviennent de bases de données, de tables ou de SIG, et rien que pour les lire, il y a besoin de plusieurs logiciels selon les formats. Les données sont ensuite nettoyées (valeurs manquantes ou aberrantes, recodages, discrétisation, renommages …), puis traitées (sélection, agrégation, modélisation) et visualisées (tables, graphiques, cartes). Les éléments visuels sont insérés dans un traitement de texte qui sert aussi à la rédaction, et enfin la version diffusable est produite au format pdf. Plusieurs inconvénients à cette chaîne d’opérations : Beaucoup d’opérations manuelles chronophages et sources potentielles d’erreurs. Si quelque chose change, il faut tout recommencer (mise à jour, adaptation à une autre zone géographique ou fenêtre temporelle). La publication finale n’est pas “reproductible” au sens où la traçabilité est insuffisante pour qu’un autre auteur, avec les mêmes données, arrive à la même publication \\(\\Rightarrow\\) la recherche d’erreurs est difficile et les passations délicates. Les contenus sont statiques, ce qui est peu attractif par rapport aux possibilités d’interactivité offertes par les technologies web. Le fil conducteur de ce module est la production de A à Z d’un portrait de territoire, à partir de données variées, en travaillant entièrement dans RStudio au format R Markdown. On appelle ici “publication reproductible” un document élaboré à partir de données et dont tout le code est fourni. C’est la disponibilité du code qui rend l’analyse réplicable, indépendament de la qualité de la documentation qui peut être fournie. Travailler ainsi a pour avantages majeurs une plus grande facilité quand il s’agit de : Rechercher d’éventuelles erreurs Justifier précisément les analyses réalisées, les pré-traitements et autres choix méthodologiques Mettre à jour la publication Modifier le code par exemple pour l’adapter à unnouveau document Partager une méthode La transparence dans le traitement de l’information est importante en termes de crédibilité pour les institutions. Selon Wikipedia, qui parle de “crise de la reproductibilité”, une part très importante des études publiées dans des revues prestigieuses ne sont pas réplicables. Un MOOC intitulé “Recherche reproductible : principes méthodologiques pour une science transparente” est périodiquement proposé sur la plateforme France Université Numérique. Contrairement à ce que suggère son titre, des non-chercheurs peuvent tout à fait le suivre car ses principes sont pleinement applicables aux métiers qui font appel à la donnée en général. Tous les exercices peuvent être faits avec R et RStudio. 2.2 Bonnes pratiques On vise à assurer la continuité et la traçabilité coomplète de la chaîne de traitement depuis la donnée brute (fichiers sources fournis par les producteurs, millésimés) jusqu’au document final. Par exemple on ne supprime pas “à la main” des données qui sembleraient aberrantes. Les choix méthodologiques sont documentés. Travail est organisé en mode projet avec des fichiers localisés dans une arborescence classique avec archivage des millésimes des jeux de données mobilisés. 2.3 Origine du format R markdown Ce format de document a été introduit en 2012 à la sortie du package knitr. Auparavant, il existait Markdown, un “langage de balisage léger”, sorte d’intermédiaire entre du texte brut et du traitement de texte. La syntaxe de Markdown est très simplifiée. On peut le saisir avec un éditeur de texte comme Notepad et il est lisible même non formaté. Pourquoi utiliser un langage de balisage léger ? Des avantages majeurs : Séparer le fond de la forme. On peut taper “au kilomètre” en se concentrant sur le contenu, et voir ensuite les questions de forme (y compris le format de sortie, HTML, PDF, traitements de texte, diaporamas, tableaux de bord, voire EPUB). Cette simplicité permet le suivi de version par des outils comme Git. Par contre, la simplicité signifie peu de fonctionnalités donc des sorties assez pauvres. L’idée, avec R Markdown, était garder les avantages du langage existant Markdown mais en lui ajoutant des fonctionnalités d’interprétation de code R, intégré aux documents sous formes de chunks. En fait, les versions actuelles du package knitr permettent d’interpréter d’autres langages comme du \\(\\LaTeX\\) ou du code Python. R Markdown est en quelque sorte un cadre pour travailler en data science. Un même document permet de sauvegarder et exécuter du code ainsi que de produire des rapports mis en forme pouvant contenir une grande diversité d’objets statiques ou dynamiques. 2.4 Du .Rmd au format de sortie On distingue deux étapes : La première, réalisée par le package knitr, interprète le document R Markdown et exécute les morceaux de code. Elle produit un fichier Markdown contenant le texte, le code et le résultat de l’exécution du code. Puis, le convertisseur de formats Pandoc se charge de produire le document de sortie au format choisi. Ca peut paraître compliqué mais en pratique, chacune des fonctions render de knitr exécute la chaîne du début à la fin. "],["bien-commencer.html", "Chapitre 3 Bien commencer 3.1 Créer un projet sous Rstudio pour vous permettre de recencer vos travaux. 3.2 Intégrer vos données 3.3 Activer les packages nécessaires", " Chapitre 3 Bien commencer 3.1 Créer un projet sous Rstudio pour vous permettre de recencer vos travaux. Pourquoi travailler avec les projets Rstudio plutôt que les scripts R ? Cela permet la portabilité : le répertoire de travail par défaut d’un projet est le répertoire où est ce projet. Si vous transmettez celui-ci à un collègue, le fait de lancer un programme ne dépend pas de l’arborescence de votre machine. Fini les setwd(&quot;chemin/qui/marche/uniquement/sur/mon/poste&quot;) ! Toujours sur la portabilité, un projet peut être utiliser avec un outil comme packrat qui va vous internaliser en interne au projet l’ensemble des packages dont vous aurez besoin dans votre projet. Cela permet donc à votre collègue à qui vous passer votre projet de ne pas avoir à les installer et surtout si vous mettez à jour votre environnement R, votre projet restera toujours avec les versions des packages avec lesquelles vous avez fait tourné votre projet à l’époque. Cela évite d’avoir à surbir les effets d’une mise à jour important d’un package qui casserait votre code. Pour activer packrat sur un projet, aller dans Tools/Project Options-&gt;Packrat En savoir plus sur Packrat Cela permet de se forcer à travailler en mode projet : on intègre à un seul endroit tous ce qui est lié à un projet : données brutes, données retravaillées, scripts, illustrations, documentations, publications… et donc y compris package avec packrat. On peut travailler sur plusieurs projets en même temps, Rstudio ouvre autant de sessions que de projet dans ce cas. Les projets Rstudio intègrent une interface avec les outils de gestion de version git et svn. Cela veut dire que vous pouvez versionniser votre projet et l’héberger simplement comme répertoire sur des plateformes de gestion de code telle que github ou gitlab. Pour créer un projet : Cliquez sur Project en haut à droite puis New Project. Cliquez sur New Directory. 3.2 Intégrer vos données Une bonne pratique est de créer un sous répertoire /data pour stocker les données sur lesquelles vous aurez à travailler. Vous pouvez le faire de l’explorateur de fichier de votre système d’exploitation ou directement à partir de l’explorateur de fichier de RStudio. Cela marche bien quand on a un seul type de données, mais en général on va avoir à travailler sur des données brutes que l’on va retravailler ensuite et vouloir stocker à part. Si par la suite vous souhaitez avoir des exemples de bonnes pratiques sur comment structurer vos données, vous pouvez vous référer au chapitre data du livre d’Hadley Wickham sur la construction de package R (tout package R étant aussi un projet !) 3.3 Activer les packages nécessaires Créer un répertoire /scripts ou vous mettrez vos scripts R. Commencer par rajouter un script à votre projet qui commencera par : activer l’ensemble des packages nécessaires charger les données dont vous aurez besoins. library (rmarkdown) library (tidyverse) load(&quot;data/data_exercices_formation.RData&quot;) load(&quot;data/ODD.RData&quot;) Pour générer des sorties pdf ou Word, il est nécessaire d’installer une distribution \\(LaTeX\\). Sauf à avoir déjà une installation sur la machine, il est recommandé d’installer TinyTeX: install.packages(&quot;tinytex&quot;) tinytex::install_tinytex() # install TinyTeX "],["le-fichier-r-markdown.html", "Chapitre 4 Le fichier R Markdown 4.1 Créer un fichier 4.2 Rmarkdown dans RStudio 4.3 Les éléments d’un fichier .Rmd", " Chapitre 4 Le fichier R Markdown La “cheatsheet” rmarkdown est uen aide précieuse pour débuter. Elle est accessible sur le site de RStudio ou directement depuis RStudio : 4.1 Créer un fichier Pour utiliser R Markdown, il faut que le package rmarkdown soit installé : install.packages (&quot;rmarkdown&quot;) library (rmarkdown) Ensuite : Puis : Pour commencer simple, on choisit un format de sortie HTML. L’extension de ce type de fichier est .Rmd. 4.2 Rmarkdown dans RStudio Un fichier R Markdown est constitué de 3 éléments principaux. L’en-tête, au format YAML, contient des métadonnées basiques sur le document ainsi que des choix relatifs au format de sortie (PDF, HTML, DOCX, etc.). Il est délimité par deux séries de ---. Quand on passe par le menu File \\(\\Rightarrow\\) New file \\(\\Rightarrow\\) R Markdown, RStudio crée l’en-tête YAML. Pour modifier l’en-tête, attention à bien respecter l’alignement des indentations. Ce sont elles qui indiquent la hiérarchie entre les éléments texte. L’en-tête est suivi du corps du document constitué de morceaux de code (les chunks), de texte et d’élements de mise en forme. Dans l’IDE RStudio, le développeur dispose d’outils qui simplifient la production du fichier R Markdown (si possible images à reprendre et à traduire. Source : rmarkdown cheatsheet de 02/2016). Le travail comprend les étapes suivantes : 4.3 Les éléments d’un fichier .Rmd 4.3.1 Les éléments texte Les bases du langage sont très bien expliquées dans cet ouvrage : Yihui Xie est le créateur du package rmarkdown. 4.3.1.1 Le texte simple Le texte simple est directement interprété sans besoin de balisage. 4.3.1.2 La mise en forme à la volée Pour les caractères en italique, entourer de deux * ou deux _ : *caractères italiques*. Pour les caractères gras, entourer de deux ** ou deux __ : **caractères gras**. Pour les indices et les exposants, entourer des caractères ~ou ^ respectivement. Pour les barrés, entourer des caractères ~~. Pour forcer le retour à la ligne, terminer par un double espace ou sauter une ligne. 4.3.1.3 Les listes Liste à puces + Premier élément + Deuxième élément - Sous-élément 1 - ezgtz - aergtg - Sous-élément 2 Rend : Premier élément Deuxième élément - Sous-élément 1 - ezgtz - aergtg - Sous-élément 2 Liste numérotée 1. Premier élément 2. Deuxième élément i) Sous-élément 1 a. ezgtz b. aergtg ii) Sous-élément 2 Rend : Premier élément Deuxième élément Sous-élément 1 ezgtz aergtg Sous-élément 2 4.3.1.4 Les encarts Pratique pour les éléments à mettre en valeur comme les “à retenir”. &gt; encart encart 4.3.1.5 Les éléments numérotés Contrairement à la pratique en R, le # indique les titres : # pour le Titre1 ## pour le Titre2 ### pour le Titre3 Par défaut ils sont numérotés. Si l’on souhaite qu’une section ne soit pas numérotée, par exemple pour les annexes ou la bibliographie, il faut faire suivre son titre de {-}. Exemple : # Annexe A {-}. On peut insérer des balises qui ne sont pas visibles en html mais permettent des renvois à l’intérieur du document. Pour placer la balise : # Qui a répondu à cette enquête ? {#qui-a-repondu} Puis pour faire un lien dessus : [Cliquer sur le lien](#qui-a-repondu) Pour une numérotation automatique des tableaux, figures, cartes, équations, etc. il faut passer au package bookdown. 4.3.2 Les chunks Raccourci d’insersion d’un chunk : Ctrl + Alt + I 4.3.2.1 Les options des chunks Chaque chunk peut être paramétré. La liste complète des paramètres proposés est accessible sur : https://yihui.name/knitr/options/ eval = TRUE : Le chunk est exécuté. include = TRUE : Le code contenu dans le chunk est éxecuté sans que soient affichés ni le chunk ni son résultat. Ses résultats sont utilisables par d’autres chunks. echo = FALSE : permet de ne pas afficher les codes dans le rendu. Par contre le résultat est affiché. message = FALSE : empêche l’affichage des messages d’information générés par les codes. warning = FALSE : empêche l’affichage des messages d’alerte générés par les codes. error = FALSE : empêche l’affichage des messages d’erreur générés par les codes. fig.cap = &quot;...&quot; : ajoute une légende aux graphiques. fig.align = &quot;...&quot; : alignement des graphiques (choix : left, right ou center). fig.height = 6, fig.width = 8 : dimensions de la figure (en pouces). et plus encore : R.options, aniopts, autodep, background, cache.comments, cache.lazy, cache.rebuild, cache.vars, dev, dev.args, dpi, engine.opts, engine.path, fig.asp, fig.env, fig.ext, fig.keep, fig.lp, fig.path, fig.pos, fig.process, fig.retina, fig.scap, fig.show, fig.showtext, fig.subcap, interval, out.extra, out.height, out.width, prompt, purl, ref.label, render, size, split, tidy.opts 4.3.2.2 Les options globales des chunks Il est possible d’appliquer des options globales qui seront appliquées chacun des chunks qui sont contenus dans le fichier, sauf spécifications contraires “locales” dans chacun des chunks. 4.3.2.3 Le cache Si le temps d’éxecution du code est trop long, il est possible d’utiliser l’option de mise en cache de knitr afin d’améliorer les performances d’éxécution du code. Enchaînement, paramétrage, 4.3.3 Insérer des images La syntaxe la plus simple est la suivante : ![Légende de la figure.](chemin/vers/image.png) On peut adapter les dimensions de l’image : ![Légende de la figure.](chemin/vers/image.png){ width=50% } NB : les caractères ‘espace’ ne sont pas autorisés autour du signe égal =, ni entre la parenthèse fermante et l’accolade ouvrante. On a ){. On peut aussi utiliser la fonction knitr::include_graphics : ```{r eval=TRUE} knitr::include_graphics(&quot;images/couleuvre.jpg&quot;) ``` Cette dernière méthode est préconisée quand le format de sortie n’est pas du html. Des options générales qui s’appliquent aux chunks avec knitr::opts_chunk$set(). Celles-ci vont s’appliquer par défaut sur chacun des chunks sauf si d’autres options sont spécifiées. 4.3.4 Insérer des éléments en \\(\\LaTeX\\) \\(\\LaTeX\\) permet de mettre en forme toutes les expressions mathématiques. L’équation est à inclure entre deux $. Par exemple $S=\\pi \\cdot \\dfrec{D^2}{4}$ donne \\(S=\\pi \\cdot \\dfrac{D^2}{4}\\) On peut prévisualiser une équation en positionnant le curseur dans l’équation dans le script : "],["paramétrage.html", "Chapitre 5 Paramétrage 5.1 Paramétrage général du fichier .Rmd", " Chapitre 5 Paramétrage 5.1 Paramétrage général du fichier .Rmd Dimension, format de sortie, table des matière, css, yml, "],["a-ne-pas-oublier.html", "Chapitre 6 A ne pas oublier", " Chapitre 6 A ne pas oublier Utilisation backticks Latex pour l’écriture mathématique ## Bookdown La principale différence entre la complilation en HTML d’un document bookdown et celle d’un document RMarkdown est que le premier comprend plusieurs pages HTML par défault - typiquement une par chapitre. La séparation d’un document en plusieurs pages a pour avantages d’autoriser l’envoi de liens vers des chacun des chapitres et de réduire le temps d’affichage car chaque page est moins lourde prise séparément. Les “plus” de bookdown (numérotation et référencement des équations, théorèmes, titres particuliers, bibliographie) ; cf bouquin bookdown pp 15-23 : Balises Table des matières css liens images versioning mise en page Flexdashboard nommer les chunks code hors chunks Les thèmes ggplot pour assurer la présentation homogène des graphiques + les fonctions custom Table des matières Homogénéiser la présentation : fonctions graphiques "],["rappels-du-jour-1.html", "Chapitre 7 Rappels du jour 1", " Chapitre 7 Rappels du jour 1 "],["exercice.html", "Chapitre 8 Exercice 8.1 Cadrage", " Chapitre 8 Exercice 8.1 Cadrage J’ai mis ici le code d’une appli shiny que j’ai commencé à coder. L’objectif de l’appli est d’avoir une interface de géolocalisation pour les adresses RPLS dans un premier temps mais on peut élargir ça à toutes les tables qui contiennent le type d’informations requises (Type de voie, numéro de voie, nom de voie, code postal et code insee) par l’API d’Etalab. Le géocodage se fait a raison de 1000 lignes toutes les 2 minutes environ. J’ai jamais réussi à utiliser le géocodage csv fourni par Etalab (https://adresse.data.gouv.fr/csv#preview) c’est pourquoi je me suis lancé dans une appli qui requête leur API avec curl . Ca peut être utile pour l’exo car : 1 - on télécharge les données RPLS 2018 (eh oui, c’est celles que je connais bien) 2 - On récupère et nettoie un peu les adresses 3 - On les géolocalise grâce à l’API d’Etalab 4 - On affiche la carte sur leaflet 5 - C’est pas encore fini du tout — # TODO : Les codes fonctionnent en .R si on lance tous les chunks dans un scrip. Mais je n’ai pas réussi à faire tourner les chunks dans un markdown — 8.1.1 Problématique 8.1.2 Rendu Pour ce rendu, quelles données ? Quels packages ? ### Données dispo ## Mise en page ### Quel type ? Barre de navigation ou onglets ? ### Un petit CSS ### Logo ### Métadoonnées ### Dashboard Pour ce rendu, quelles données ? Quels packages ? ## Importation des données "],["interactive-documents-an-r-markdown-file-that-contains-shiny-components-and-can-be-an-app-or-used-within-a-report.html", "Chapitre 9 Interactive Documents - an R Markdown file that contains Shiny components and can be an app or used within a report", " Chapitre 9 Interactive Documents - an R Markdown file that contains Shiny components and can be an app or used within a report Source : https://beta.rstudioconnect.com/content/2671/Combining-Shiny-R-Markdown.html Types of Interactive Documents: RMD Interactive Document/Report with Shiny components Example: Demo by using File &gt; New &gt; RMarkdown &gt; Shiny &gt; Shiny Document HTML presentations with Embed Shiny components Example: Demo by using File &gt; New &gt; RMarkdown &gt; Shiny &gt; Shiny Presentation 1/2 Note. It is also possible to embed an entire shiny application within an R Markdown document using the shinyAppDir function or shinyAppFile or source http://rmarkdown.rstudio.com/authoring_embedded_shiny.html R Markdown report as Shiny app Example https://jjallaire.shinyapps.io/shiny-ggplot2-brushing/ "]]
